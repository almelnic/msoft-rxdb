{"version":3,"file":"rx-collection.js","names":["filter","map","mergeMap","ucfirst","flatClone","promiseSeries","pluginMissing","ensureNotFalsy","getFromMapOrThrow","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","fillObjectDataBeforeInsert","createRxCollectionStorageInstance","removeCollectionStorages","ensureRxCollectionIsNotDestroyed","createRxQuery","_getDefaultQuery","newRxError","newRxTypeError","DocumentCache","mapDocumentsDataToCacheDocs","createQueryCache","defaultCacheReplacementPolicy","createChangeEventBuffer","runAsyncPluginHooks","runPluginHooks","createNewRxDocument","getRxDocumentConstructor","getWrappedStorageInstance","getWrittenDocumentsFromBulkWriteResponse","throwIfIsStorageWriteError","defaultConflictHandler","IncrementalWriteQueue","beforeDocumentUpdateWrite","overwritable","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","statics","conflictHandler","storageInstance","timeouts","Set","incrementalWriteQueue","awaitBeforeReads","_incrementalUpsertQueues","Map","synced","hooks","_subs","_docCache","_queryCache","$","checkpoint$","_changeEventBuffer","onDestroy","destroyed","onRemove","_applyHookFunctions","asRxCollection","_proto","prototype","prepare","jsonSchema","primaryPath","newData","oldData","result","_runHooks","collectionEventBulks$","eventBulks$","pipe","changeEventBulk","collectionName","events","checkpoint","documentConstructor","isLocal","b","docData","listenToRemoveSub","internalStore","changeStream","bulk","key","version","found","find","event","documentData","context","operation","subscribe","destroy","Promise","all","fn","push","databaseStorageToken","storageToken","subDocs","eventBulk","Array","length","rawEvents","deepFreezeWhenDevMode","index","documentId","previousDocumentData","id","internal","databaseToken","token","endTime","startTime","$emit","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","cleanup","_minimumDeletedTime","migrationNeeded","getMigrationState","startMigration","batchSize","migratePromise","insert","json","writeResult","bulkInsert","isError","error","insertResult","success","docsData","insertRows","hasHooks","useDocData","document","results","bulkWrite","rxDocuments","collection","ret","docsMap","forEach","row","doc","set","get","primary","bulkRemove","ids","rxDocumentMap","findByIds","exec","from","values","rxDocument","data","toMutableJSON","removeDocs","writeDoc","_deleted","previous","successIds","d","bulkUpsert","insertData","useJsonByDocId","useJson","slice","err","status","writeData","docDataInDb","documentInDb","getCachedRxDocuments","newDoc","incrementalModify","upsert","bulkResult","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","queryObj","query","findOne","isArray","selector","limit","count","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","addPipeline","_options","addHook","when","fun","parallel","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","_runHooksSync","promiseWait","time","res","timeout","setTimeout","delete","add","clearTimeout","requestIdlePromise","close","sub","unsubscribe","collections","remove","storage","password","hashFunction","_createClass","cE","colProto","Object","getPrototypeOf","fnName","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","devMode","isDevMode","entries","funName","defineProperty","creator","catch","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\r\n    filter,\r\n    map,\r\n    mergeMap\r\n} from 'rxjs';\r\n\r\nimport {\r\n    ucfirst,\r\n    flatClone,\r\n    promiseSeries,\r\n    pluginMissing,\r\n    ensureNotFalsy,\r\n    getFromMapOrThrow,\r\n    PROMISE_RESOLVE_FALSE,\r\n    PROMISE_RESOLVE_VOID\r\n} from './plugins/utils/index.ts';\r\nimport {\r\n    fillObjectDataBeforeInsert,\r\n    createRxCollectionStorageInstance,\r\n    removeCollectionStorages,\r\n    ensureRxCollectionIsNotDestroyed\r\n} from './rx-collection-helper.ts';\r\nimport {\r\n    createRxQuery,\r\n    _getDefaultQuery\r\n} from './rx-query.ts';\r\nimport {\r\n    newRxError,\r\n    newRxTypeError\r\n} from './rx-error.ts';\r\nimport type {\r\n    RxMigrationState\r\n} from './plugins/migration-schema/index.ts';\r\nimport {\r\n    DocumentCache,\r\n    mapDocumentsDataToCacheDocs\r\n} from './doc-cache.ts';\r\nimport {\r\n    QueryCache,\r\n    createQueryCache,\r\n    defaultCacheReplacementPolicy\r\n} from './query-cache.ts';\r\nimport {\r\n    ChangeEventBuffer,\r\n    createChangeEventBuffer\r\n} from './change-event-buffer.ts';\r\nimport {\r\n    runAsyncPluginHooks,\r\n    runPluginHooks\r\n} from './hooks.ts';\r\n\r\nimport {\r\n    Subscription,\r\n    Observable\r\n} from 'rxjs';\r\n\r\nimport type {\r\n    KeyFunctionMap,\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxQuery,\r\n    RxDocument,\r\n    RxDumpCollection,\r\n    RxDumpCollectionAny,\r\n    MangoQuery,\r\n    MangoQueryNoLimit,\r\n    RxCacheReplacementPolicy,\r\n    RxStorageWriteError,\r\n    RxDocumentData,\r\n    RxStorageInstanceCreationParams,\r\n    BulkWriteRow,\r\n    RxChangeEvent,\r\n    RxChangeEventInsert,\r\n    RxChangeEventUpdate,\r\n    RxChangeEventDelete,\r\n    RxStorageInstance,\r\n    CollectionsOfDatabase,\r\n    RxChangeEventBulk,\r\n    RxLocalDocumentData,\r\n    RxDocumentBase,\r\n    RxConflictHandler,\r\n    MaybePromise,\r\n    CRDTEntry,\r\n    MangoQuerySelectorAndIndex,\r\n    MigrationStrategies\r\n} from './types/index.d.ts';\r\n\r\nimport {\r\n    RxSchema\r\n} from './rx-schema.ts';\r\n\r\nimport {\r\n    createNewRxDocument,\r\n    getRxDocumentConstructor\r\n} from './rx-document-prototype-merge.ts';\r\nimport {\r\n    getWrappedStorageInstance,\r\n    getWrittenDocumentsFromBulkWriteResponse,\r\n    throwIfIsStorageWriteError,\r\n    WrappedRxStorageInstance\r\n} from './rx-storage-helper.ts';\r\nimport { defaultConflictHandler } from './replication-protocol/index.ts';\r\nimport { IncrementalWriteQueue } from './incremental-write.ts';\r\nimport { beforeDocumentUpdateWrite } from './rx-document.ts';\r\nimport { overwritable } from './overwritable.ts';\r\nimport type { RxPipeline, RxPipelineOptions } from './plugins/pipeline/index.ts';\r\n\r\nconst HOOKS_WHEN = ['pre', 'post'] as const;\r\ntype HookWhenType = typeof HOOKS_WHEN[number];\r\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\r\ntype HookKeyType = typeof HOOKS_KEYS[number];\r\nlet hooksApplied = false;\r\n\r\nexport class RxCollectionBase<\r\n    InstanceCreationOptions,\r\n    RxDocumentType = { [prop: string]: any; },\r\n    OrmMethods = {},\r\n    StaticMethods = { [key: string]: any; },\r\n    Reactivity = any\r\n> {\r\n\r\n\r\n    /**\r\n     * Stores all 'normal' documents\r\n     */\r\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\r\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\r\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\r\n\r\n\r\n    /**\r\n     * Before reads, all these methods are awaited. Used to \"block\" reads\r\n     * depending on other processes, like when the RxPipeline is running.\r\n     */\r\n    public readonly awaitBeforeReads = new Set<() => MaybePromise<any>>();\r\n\r\n    constructor(\r\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions, Reactivity>,\r\n        public name: string,\r\n        public schema: RxSchema<RxDocumentType>,\r\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\r\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\r\n        public migrationStrategies: MigrationStrategies = {},\r\n        public methods: KeyFunctionMap = {},\r\n        public attachments: KeyFunctionMap = {},\r\n        public options: any = {},\r\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\r\n        public statics: KeyFunctionMap = {},\r\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\r\n    ) {\r\n        _applyHookFunctions(this.asRxCollection);\r\n    }\r\n\r\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\r\n        return this.$.pipe(\r\n            filter(cE => cE.operation === 'INSERT')\r\n        ) as any;\r\n    }\r\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\r\n        return this.$.pipe(\r\n            filter(cE => cE.operation === 'UPDATE')\r\n        ) as any;\r\n    }\r\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\r\n        return this.$.pipe(\r\n            filter(cE => cE.operation === 'DELETE')\r\n        ) as any;\r\n    }\r\n\r\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\r\n    // defaults\r\n    public synced: boolean = false;\r\n    public hooks: {\r\n        [key in HookKeyType]: {\r\n            [when in HookWhenType]: {\r\n                series: Function[];\r\n                parallel: Function[];\r\n            };\r\n        }\r\n    } = {} as any;\r\n    public _subs: Subscription[] = [];\r\n\r\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\r\n\r\n    public _queryCache: QueryCache = createQueryCache();\r\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\r\n    public checkpoint$: Observable<any> = {} as any;\r\n    public _changeEventBuffer: ChangeEventBuffer<RxDocumentType> = {} as ChangeEventBuffer<RxDocumentType>;\r\n\r\n\r\n\r\n    /**\r\n     * When the collection is destroyed,\r\n     * these functions will be called an awaited.\r\n     * Used to automatically clean up stuff that\r\n     * belongs to this collection.\r\n    */\r\n    public onDestroy: (() => MaybePromise<any>)[] = [];\r\n    public destroyed = false;\r\n\r\n    public onRemove: (() => MaybePromise<any>)[] = [];\r\n\r\n    public async prepare(): Promise<void> {\r\n        this.storageInstance = getWrappedStorageInstance(\r\n            this.database,\r\n            this.internalStorageInstance,\r\n            this.schema.jsonSchema\r\n        );\r\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\r\n            this.storageInstance,\r\n            this.schema.primaryPath,\r\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\r\n            result => this._runHooks('post', 'save', result)\r\n        );\r\n\r\n        const collectionEventBulks$ = this.database.eventBulks$.pipe(\r\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\r\n        );\r\n        this.$ = collectionEventBulks$.pipe(\r\n            mergeMap(changeEventBulk => changeEventBulk.events),\r\n        );\r\n        this.checkpoint$ = collectionEventBulks$.pipe(\r\n            map(changeEventBulk => changeEventBulk.checkpoint),\r\n        );\r\n\r\n        this._changeEventBuffer = createChangeEventBuffer<RxDocumentType>(this.asRxCollection);\r\n        let documentConstructor: any;\r\n        this._docCache = new DocumentCache(\r\n            this.schema.primaryPath,\r\n            this.database.eventBulks$.pipe(\r\n                filter(changeEventBulk => changeEventBulk.collectionName === this.name && !changeEventBulk.events[0].isLocal),\r\n                map(b => b.events)\r\n            ),\r\n            docData => {\r\n                if (!documentConstructor) {\r\n                    documentConstructor = getRxDocumentConstructor(this.asRxCollection);\r\n                }\r\n                return createNewRxDocument(this.asRxCollection, documentConstructor, docData);\r\n            }\r\n        );\r\n\r\n\r\n        const listenToRemoveSub = this.database.internalStore.changeStream().pipe(\r\n            filter(bulk => {\r\n                const key = this.name + '-' + this.schema.version;\r\n                const found = bulk.events.find(event => {\r\n                    return (\r\n                        event.documentData.context === 'collection' &&\r\n                        event.documentData.key === key &&\r\n                        event.operation === 'DELETE'\r\n                    );\r\n                });\r\n                return !!found;\r\n            })\r\n        ).subscribe(async () => {\r\n            await this.destroy();\r\n            await Promise.all(this.onRemove.map(fn => fn()));\r\n        });\r\n        this._subs.push(listenToRemoveSub);\r\n\r\n\r\n        /**\r\n         * TODO Instead of resolving the EventBulk array here and spit it into\r\n         * single events, we should fully work with event bulks internally\r\n         * to save performance.\r\n         */\r\n        const databaseStorageToken = await this.database.storageToken;\r\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\r\n            const events = new Array(eventBulk.events.length);\r\n            const rawEvents = eventBulk.events;\r\n            const collectionName = this.name;\r\n            const deepFreezeWhenDevMode = overwritable.deepFreezeWhenDevMode;\r\n            for (let index = 0; index < rawEvents.length; index++) {\r\n                const event = rawEvents[index];\r\n                events[index] = {\r\n                    documentId: event.documentId,\r\n                    collectionName,\r\n                    isLocal: false,\r\n                    operation: event.operation,\r\n                    documentData: deepFreezeWhenDevMode(event.documentData) as any,\r\n                    previousDocumentData: deepFreezeWhenDevMode(event.previousDocumentData) as any\r\n                };\r\n            }\r\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\r\n                id: eventBulk.id,\r\n                internal: false,\r\n                collectionName: this.name,\r\n                storageToken: databaseStorageToken,\r\n                events,\r\n                databaseToken: this.database.token,\r\n                checkpoint: eventBulk.checkpoint,\r\n                context: eventBulk.context,\r\n                endTime: eventBulk.endTime,\r\n                startTime: eventBulk.startTime\r\n            };\r\n            this.database.$emit(changeEventBulk);\r\n        });\r\n        this._subs.push(subDocs);\r\n\r\n        /**\r\n         * Resolve the conflict tasks\r\n         * of the RxStorageInstance\r\n         */\r\n        this._subs.push(\r\n            this.storageInstance\r\n                .conflictResultionTasks()\r\n                .subscribe(task => {\r\n                    this\r\n                        .conflictHandler(task.input, task.context)\r\n                        .then(output => {\r\n                            this.storageInstance.resolveConflictResultionTask({\r\n                                id: task.id,\r\n                                output\r\n                            });\r\n                        });\r\n                })\r\n        );\r\n\r\n        return PROMISE_RESOLVE_VOID;\r\n    }\r\n\r\n\r\n    /**\r\n     * Manually call the cleanup function of the storage.\r\n     * @link https://rxdb.info/cleanup.html\r\n     */\r\n    cleanup(_minimumDeletedTime?: number): Promise<boolean> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        throw pluginMissing('cleanup');\r\n    }\r\n\r\n    // overwritten by migration-plugin\r\n    migrationNeeded(): Promise<boolean> {\r\n        throw pluginMissing('migration-schema');\r\n    }\r\n    getMigrationState(): RxMigrationState {\r\n        throw pluginMissing('migration-schema');\r\n    }\r\n    startMigration(batchSize: number = 10): Promise<void> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        return this.getMigrationState().startMigration(batchSize);\r\n    }\r\n    migratePromise(batchSize: number = 10): Promise<any> {\r\n        return this.getMigrationState().migratePromise(batchSize);\r\n    }\r\n\r\n    async insert(\r\n        json: RxDocumentType | RxDocument\r\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const writeResult = await this.bulkInsert([json as any]);\r\n\r\n        const isError = writeResult.error[0];\r\n        throwIfIsStorageWriteError(this as any, (json as any)[this.schema.primaryPath] as any, json, isError);\r\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\r\n        return insertResult;\r\n    }\r\n\r\n    async bulkInsert(\r\n        docsData: RxDocumentType[]\r\n    ): Promise<{\r\n        success: RxDocument<RxDocumentType, OrmMethods>[];\r\n        error: RxStorageWriteError<RxDocumentType>[];\r\n    }> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        /**\r\n         * Optimization shortcut,\r\n         * do nothing when called with an empty array\r\n        */\r\n        if (docsData.length === 0) {\r\n            return {\r\n                success: [],\r\n                error: []\r\n            };\r\n        }\r\n\r\n        const primaryPath = this.schema.primaryPath;\r\n\r\n\r\n        /**\r\n         * This code is a bit redundant for better performance.\r\n         * Instead of iterating multiple times,\r\n         * we directly transform the input to a write-row array.\r\n         */\r\n        let insertRows: BulkWriteRow<RxDocumentType>[];\r\n        if (this.hasHooks('pre', 'insert')) {\r\n            insertRows = await Promise.all(\r\n                docsData.map(docData => {\r\n                    const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\r\n                    return this._runHooks('pre', 'insert', useDocData)\r\n                        .then(() => {\r\n                            return { document: useDocData };\r\n                        });\r\n                })\r\n            );\r\n        } else {\r\n            insertRows = new Array(docsData.length);\r\n            const schema = this.schema;\r\n            for (let index = 0; index < docsData.length; index++) {\r\n                const docData = docsData[index];\r\n                const useDocData = fillObjectDataBeforeInsert(schema, docData);\r\n                insertRows[index] = { document: useDocData };\r\n            }\r\n        }\r\n\r\n        const results = await this.storageInstance.bulkWrite(\r\n            insertRows,\r\n            'rx-collection-bulk-insert'\r\n        );\r\n\r\n\r\n        /**\r\n         * Often the user does not need to access the RxDocuments of the bulkInsert() call.\r\n         * So we transform the data to RxDocuments only if needed to use less CPU performance.\r\n         */\r\n        let rxDocuments: RxDocument<RxDocumentType, OrmMethods>[];\r\n        const collection = this;\r\n        const ret = {\r\n            get success() {\r\n                if (!rxDocuments) {\r\n                    const success = getWrittenDocumentsFromBulkWriteResponse(\r\n                        collection.schema.primaryPath,\r\n                        insertRows,\r\n                        results\r\n                    );\r\n                    rxDocuments = mapDocumentsDataToCacheDocs<RxDocumentType, OrmMethods>(collection._docCache, success);\r\n                }\r\n                return rxDocuments;\r\n            },\r\n            error: results.error\r\n        };\r\n\r\n        if (this.hasHooks('post', 'insert')) {\r\n            const docsMap: Map<string, RxDocumentType> = new Map();\r\n            insertRows.forEach(row => {\r\n                const doc = row.document;\r\n                docsMap.set((doc as any)[primaryPath] as any, doc);\r\n            });\r\n            await Promise.all(\r\n                ret.success.map(doc => {\r\n                    return this._runHooks(\r\n                        'post',\r\n                        'insert',\r\n                        docsMap.get(doc.primary),\r\n                        doc\r\n                    );\r\n                })\r\n            );\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    async bulkRemove(\r\n        ids: string[]\r\n    ): Promise<{\r\n        success: RxDocument<RxDocumentType, OrmMethods>[];\r\n        error: RxStorageWriteError<RxDocumentType>[];\r\n    }> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const primaryPath = this.schema.primaryPath;\r\n        /**\r\n         * Optimization shortcut,\r\n         * do nothing when called with an empty array\r\n         */\r\n        if (ids.length === 0) {\r\n            return {\r\n                success: [],\r\n                error: []\r\n            };\r\n        }\r\n\r\n        const rxDocumentMap = await this.findByIds(ids).exec();\r\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\r\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\r\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\r\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\r\n            docsData.push(data);\r\n            docsMap.set(rxDocument.primary, data);\r\n        });\r\n\r\n        await Promise.all(\r\n            docsData.map(doc => {\r\n                const primary = (doc as any)[this.schema.primaryPath];\r\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\r\n            })\r\n        );\r\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\r\n            const writeDoc = flatClone(doc);\r\n            writeDoc._deleted = true;\r\n            return {\r\n                previous: doc,\r\n                document: writeDoc\r\n            };\r\n        });\r\n        const results = await this.storageInstance.bulkWrite(\r\n            removeDocs,\r\n            'rx-collection-bulk-remove'\r\n        );\r\n\r\n\r\n        const success = getWrittenDocumentsFromBulkWriteResponse(\r\n            this.schema.primaryPath,\r\n            removeDocs,\r\n            results\r\n        );\r\n        const successIds: string[] = success.map(d => d[primaryPath] as string);\r\n\r\n        // run hooks\r\n        await Promise.all(\r\n            successIds.map(id => {\r\n                return this._runHooks(\r\n                    'post',\r\n                    'remove',\r\n                    docsMap.get(id),\r\n                    rxDocumentMap.get(id)\r\n                );\r\n            })\r\n        );\r\n\r\n        const rxDocuments = successIds.map(id => getFromMapOrThrow(rxDocumentMap, id));\r\n\r\n        return {\r\n            success: rxDocuments,\r\n            error: results.error\r\n        };\r\n    }\r\n\r\n    /**\r\n     * same as bulkInsert but overwrites existing document with same primary\r\n     */\r\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<{\r\n        success: RxDocument<RxDocumentType, OrmMethods>[];\r\n        error: RxStorageWriteError<RxDocumentType>[];\r\n    }> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const insertData: RxDocumentType[] = [];\r\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\r\n        docsData.forEach(docData => {\r\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\r\n            const primary: string = useJson[this.schema.primaryPath] as any;\r\n            if (!primary) {\r\n                throw newRxError('COL3', {\r\n                    primaryPath: this.schema.primaryPath as string,\r\n                    data: useJson,\r\n                    schema: this.schema.jsonSchema\r\n                });\r\n            }\r\n            useJsonByDocId.set(primary, useJson);\r\n            insertData.push(useJson);\r\n        });\r\n\r\n        const insertResult = await this.bulkInsert(insertData);\r\n        const success = insertResult.success.slice(0);\r\n        const error: RxStorageWriteError<RxDocumentType>[] = [];\r\n\r\n        // update the ones that existed already\r\n        await Promise.all(\r\n            insertResult.error.map(async (err) => {\r\n                if (err.status !== 409) {\r\n                    error.push(err);\r\n                } else {\r\n                    const id = err.documentId;\r\n                    const writeData = getFromMapOrThrow(useJsonByDocId, id);\r\n                    const docDataInDb = ensureNotFalsy(err.documentInDb);\r\n                    const doc = this._docCache.getCachedRxDocuments([docDataInDb])[0];\r\n                    const newDoc = await doc.incrementalModify(() => writeData);\r\n                    success.push(newDoc);\r\n                }\r\n            })\r\n        );\r\n        return {\r\n            error,\r\n            success\r\n        };\r\n    }\r\n\r\n    /**\r\n     * same as insert but overwrites existing document with same primary\r\n     */\r\n    async upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const bulkResult = await this.bulkUpsert([json]);\r\n        throwIfIsStorageWriteError<RxDocumentType>(\r\n            this.asRxCollection,\r\n            (json as any)[this.schema.primaryPath],\r\n            json as any,\r\n            bulkResult.error[0]\r\n        );\r\n        return bulkResult.success[0];\r\n    }\r\n\r\n    /**\r\n     * upserts to a RxDocument, uses incrementalModify if document already exists\r\n     */\r\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\r\n        const primary: string = useJson[this.schema.primaryPath] as any;\r\n        if (!primary) {\r\n            throw newRxError('COL4', {\r\n                data: json\r\n            });\r\n        }\r\n\r\n        // ensure that it won't try 2 parallel runs\r\n        let queue = this._incrementalUpsertQueues.get(primary);\r\n        if (!queue) {\r\n            queue = PROMISE_RESOLVE_VOID;\r\n        }\r\n        queue = queue\r\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\r\n            .then((wasInserted) => {\r\n                if (!wasInserted.inserted) {\r\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\r\n                } else {\r\n                    return wasInserted.doc;\r\n                }\r\n            });\r\n        this._incrementalUpsertQueues.set(primary, queue);\r\n        return queue;\r\n    }\r\n\r\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\r\n        RxDocumentType,\r\n        RxDocument<RxDocumentType, OrmMethods>[],\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        if (typeof queryObj === 'string') {\r\n            throw newRxError('COL5', {\r\n                queryObj\r\n            });\r\n        }\r\n\r\n        if (!queryObj) {\r\n            queryObj = _getDefaultQuery();\r\n        }\r\n\r\n        const query = createRxQuery('find', queryObj, this as any);\r\n        return query as any;\r\n    }\r\n\r\n    findOne(\r\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\r\n    ): RxQuery<\r\n        RxDocumentType,\r\n        RxDocument<RxDocumentType, OrmMethods> | null,\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n\r\n        // TODO move this check to dev-mode plugin\r\n        if (\r\n            typeof queryObj === 'number' ||\r\n            Array.isArray(queryObj)\r\n        ) {\r\n            throw newRxTypeError('COL6', {\r\n                queryObj\r\n            });\r\n        }\r\n\r\n        let query;\r\n\r\n        if (typeof queryObj === 'string') {\r\n            query = createRxQuery('findOne', {\r\n                selector: {\r\n                    [this.schema.primaryPath]: queryObj\r\n                },\r\n                limit: 1\r\n            }, this as any);\r\n        } else {\r\n            if (!queryObj) {\r\n                queryObj = _getDefaultQuery();\r\n            }\r\n\r\n\r\n            // cannot have limit on findOne queries because it will be overwritten\r\n            if ((queryObj as MangoQuery).limit) {\r\n                throw newRxError('QU6');\r\n            }\r\n\r\n            queryObj = flatClone(queryObj);\r\n            (queryObj as any).limit = 1;\r\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\r\n        }\r\n\r\n\r\n        return query as any;\r\n    }\r\n\r\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\r\n        RxDocumentType,\r\n        number,\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        if (!queryObj) {\r\n            queryObj = _getDefaultQuery();\r\n        }\r\n        const query = createRxQuery('count', queryObj, this as any);\r\n        return query as any;\r\n    }\r\n\r\n    /**\r\n     * find a list documents by their primary key\r\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\r\n     */\r\n    findByIds(\r\n        ids: string[]\r\n    ): RxQuery<\r\n        RxDocumentType,\r\n        Map<string, RxDocument<RxDocumentType, OrmMethods>>,\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const mangoQuery: MangoQuery<RxDocumentType> = {\r\n            selector: {\r\n                [this.schema.primaryPath]: {\r\n                    $in: ids.slice(0)\r\n                }\r\n            } as any\r\n        };\r\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\r\n        return query as any;\r\n    }\r\n\r\n    /**\r\n     * Export collection to a JSON friendly format.\r\n     */\r\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\r\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\r\n    exportJSON(): Promise<any> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    /**\r\n     * Import the parsed JSON export into the collection.\r\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\r\n     */\r\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\r\n        throw pluginMissing('crdt');\r\n    }\r\n\r\n\r\n    addPipeline(_options: RxPipelineOptions<RxDocumentType>): Promise<RxPipeline<RxDocumentType>> {\r\n        throw pluginMissing('pipeline');\r\n    }\r\n\r\n    /**\r\n     * HOOKS\r\n     */\r\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\r\n        if (typeof fun !== 'function') {\r\n            throw newRxTypeError('COL7', {\r\n                key,\r\n                when\r\n            });\r\n        }\r\n\r\n        if (!HOOKS_WHEN.includes(when)) {\r\n            throw newRxTypeError('COL8', {\r\n                key,\r\n                when\r\n            });\r\n        }\r\n\r\n        if (!HOOKS_KEYS.includes(key)) {\r\n            throw newRxError('COL9', {\r\n                key\r\n            });\r\n        }\r\n\r\n        if (when === 'post' && key === 'create' && parallel === true) {\r\n            throw newRxError('COL10', {\r\n                when,\r\n                key,\r\n                parallel\r\n            });\r\n        }\r\n\r\n        // bind this-scope to hook-function\r\n        const boundFun = fun.bind(this);\r\n\r\n        const runName = parallel ? 'parallel' : 'series';\r\n\r\n        this.hooks[key] = this.hooks[key] || {};\r\n        this.hooks[key][when] = this.hooks[key][when] || {\r\n            series: [],\r\n            parallel: []\r\n        };\r\n        this.hooks[key][when][runName].push(boundFun);\r\n    }\r\n\r\n    getHooks(when: HookWhenType, key: HookKeyType) {\r\n        if (\r\n            !this.hooks[key] ||\r\n            !this.hooks[key][when]\r\n        ) {\r\n            return {\r\n                series: [],\r\n                parallel: []\r\n            };\r\n        }\r\n        return this.hooks[key][when];\r\n    }\r\n\r\n    hasHooks(when: HookWhenType, key: HookKeyType) {\r\n        /**\r\n         * Performance shortcut\r\n         * so that we not have to build the empty object.\r\n         */\r\n        if (\r\n            !this.hooks[key] ||\r\n            !this.hooks[key][when]\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        const hooks = this.getHooks(when, key);\r\n        if (!hooks) {\r\n            return false;\r\n        }\r\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\r\n    }\r\n\r\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\r\n        const hooks = this.getHooks(when, key);\r\n\r\n        if (!hooks) {\r\n            return PROMISE_RESOLVE_VOID;\r\n        }\r\n\r\n        // run parallel: false\r\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\r\n        return promiseSeries(tasks)\r\n            // run parallel: true\r\n            .then(() => Promise.all(\r\n                hooks.parallel\r\n                    .map((hook: any) => hook(data, instance))\r\n            ));\r\n    }\r\n\r\n    /**\r\n     * does the same as ._runHooks() but with non-async-functions\r\n     */\r\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\r\n        if (!this.hasHooks(when, key)) {\r\n            return;\r\n        }\r\n        const hooks = this.getHooks(when, key);\r\n        if (!hooks) return;\r\n        hooks.series.forEach((hook: any) => hook(data, instance));\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves after the given time.\r\n     * Ensures that is properly cleans up when the collection is destroyed\r\n     * so that no running timeouts prevent the exit of the JavaScript process.\r\n     */\r\n    promiseWait(time: number): Promise<void> {\r\n        const ret = new Promise<void>(res => {\r\n            const timeout = setTimeout(() => {\r\n                this.timeouts.delete(timeout);\r\n                res();\r\n            }, time);\r\n            this.timeouts.add(timeout);\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    async destroy(): Promise<boolean> {\r\n        if (this.destroyed) {\r\n            return PROMISE_RESOLVE_FALSE;\r\n        }\r\n\r\n\r\n        await Promise.all(this.onDestroy.map(fn => fn()));\r\n\r\n        /**\r\n         * Settings destroyed = true\r\n         * must be the first thing to do,\r\n         * so for example the replication can directly stop\r\n         * instead of sending requests to a closed storage.\r\n         */\r\n        this.destroyed = true;\r\n\r\n\r\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\r\n        if (this._changeEventBuffer) {\r\n            this._changeEventBuffer.destroy();\r\n        }\r\n        /**\r\n         * First wait until the whole database is idle.\r\n         * This ensures that the storage does not get closed\r\n         * while some operation is running.\r\n         * It is important that we do not intercept a running call\r\n         * because it might lead to undefined behavior like when a doc is written\r\n         * but the change is not added to the changes collection.\r\n         */\r\n        return this.database.requestIdlePromise()\r\n            .then(() => this.storageInstance.close())\r\n            .then(() => {\r\n                /**\r\n                 * Unsubscribing must be done AFTER the storageInstance.close()\r\n                 * Because the conflict handling is part of the subscriptions and\r\n                 * otherwise there might be open conflicts to be resolved which\r\n                 * will then stuck and never resolve.\r\n                 */\r\n                this._subs.forEach(sub => sub.unsubscribe());\r\n\r\n                delete this.database.collections[this.name];\r\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * remove all data of the collection\r\n     */\r\n    async remove(): Promise<any> {\r\n        await this.destroy();\r\n        await Promise.all(this.onRemove.map(fn => fn()));\r\n        await removeCollectionStorages(\r\n            this.database.storage,\r\n            this.database.internalStore,\r\n            this.database.token,\r\n            this.database.name,\r\n            this.name,\r\n            this.database.password,\r\n            this.database.hashFunction\r\n        );\r\n    }\r\n\r\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods, any, Reactivity> {\r\n        return this as any;\r\n    }\r\n}\r\n\r\n/**\r\n * adds the hook-functions to the collections prototype\r\n * this runs only once\r\n */\r\nfunction _applyHookFunctions(\r\n    collection: RxCollection<any, any>\r\n) {\r\n    if (hooksApplied) return; // already run\r\n    hooksApplied = true;\r\n    const colProto = Object.getPrototypeOf(collection);\r\n    HOOKS_KEYS.forEach(key => {\r\n        HOOKS_WHEN.map(when => {\r\n            const fnName = when + ucfirst(key);\r\n            colProto[fnName] = function (fun: string, parallel: boolean) {\r\n                return this.addHook(when, key, fun, parallel);\r\n            };\r\n        });\r\n    });\r\n}\r\n\r\nfunction _incrementalUpsertUpdate<RxDocType>(\r\n    doc: RxDocumentBase<RxDocType>,\r\n    json: RxDocumentData<RxDocType>\r\n): Promise<RxDocumentBase<RxDocType>> {\r\n    return doc.incrementalModify((_innerDoc) => {\r\n        return json;\r\n    });\r\n}\r\n\r\n/**\r\n * ensures that the given document exists\r\n * @return promise that resolves with new doc and flag if inserted\r\n */\r\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\r\n    rxCollection: RxCollection<RxDocType>,\r\n    primary: string,\r\n    json: any\r\n): Promise<\r\n    {\r\n        doc: RxDocument<RxDocType>;\r\n        inserted: boolean;\r\n    }\r\n> {\r\n    /**\r\n     * Optimisation shortcut,\r\n     * first try to find the document in the doc-cache\r\n     */\r\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\r\n    if (docDataFromCache) {\r\n        return Promise.resolve({\r\n            doc: rxCollection._docCache.getCachedRxDocuments([docDataFromCache])[0],\r\n            inserted: false\r\n        });\r\n    }\r\n    return rxCollection.findOne(primary).exec()\r\n        .then(doc => {\r\n            if (!doc) {\r\n                return rxCollection.insert(json).then(newDoc => ({\r\n                    doc: newDoc,\r\n                    inserted: true\r\n                }));\r\n            } else {\r\n                return {\r\n                    doc,\r\n                    inserted: false\r\n                };\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * creates and prepares a new collection\r\n */\r\nexport function createRxCollection(\r\n    {\r\n        database,\r\n        name,\r\n        schema,\r\n        instanceCreationOptions = {},\r\n        migrationStrategies = {},\r\n        autoMigrate = true,\r\n        statics = {},\r\n        methods = {},\r\n        attachments = {},\r\n        options = {},\r\n        localDocuments = false,\r\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\r\n        conflictHandler = defaultConflictHandler\r\n    }: any\r\n): Promise<RxCollection> {\r\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\r\n        databaseInstanceToken: database.token,\r\n        databaseName: database.name,\r\n        collectionName: name,\r\n        schema: schema.jsonSchema,\r\n        options: instanceCreationOptions,\r\n        multiInstance: database.multiInstance,\r\n        password: database.password,\r\n        devMode: overwritable.isDevMode()\r\n    };\r\n\r\n    runPluginHooks(\r\n        'preCreateRxStorageInstance',\r\n        storageInstanceCreationParams\r\n    );\r\n\r\n    return createRxCollectionStorageInstance(\r\n        database,\r\n        storageInstanceCreationParams\r\n    ).then(storageInstance => {\r\n        const collection = new RxCollectionBase(\r\n            database,\r\n            name,\r\n            schema,\r\n            storageInstance,\r\n            instanceCreationOptions,\r\n            migrationStrategies,\r\n            methods,\r\n            attachments,\r\n            options,\r\n            cacheReplacementPolicy,\r\n            statics,\r\n            conflictHandler\r\n        );\r\n\r\n        return collection\r\n            .prepare()\r\n            .then(() => {\r\n                // ORM add statics\r\n                Object\r\n                    .entries(statics)\r\n                    .forEach(([funName, fun]) => {\r\n                        Object.defineProperty(collection, funName, {\r\n                            get: () => (fun as any).bind(collection)\r\n                        });\r\n                    });\r\n\r\n                let ret = PROMISE_RESOLVE_VOID;\r\n                if (autoMigrate && collection.schema.version !== 0) {\r\n                    ret = collection.migratePromise();\r\n                }\r\n                return ret;\r\n            })\r\n            .then(() => {\r\n                runPluginHooks('createRxCollection', {\r\n                    collection,\r\n                    creator: {\r\n                        name,\r\n                        schema,\r\n                        storageInstance,\r\n                        instanceCreationOptions,\r\n                        migrationStrategies,\r\n                        methods,\r\n                        attachments,\r\n                        options,\r\n                        cacheReplacementPolicy,\r\n                        localDocuments,\r\n                        statics\r\n                    }\r\n                });\r\n                return collection as any;\r\n            })\r\n            /**\r\n             * If the collection creation fails,\r\n             * we yet have to close the storage instances.\r\n             */\r\n            .catch(err => {\r\n                return storageInstance.close()\r\n                    .then(() => Promise.reject(err as Error));\r\n            });\r\n    });\r\n}\r\n\r\nexport function isRxCollection(obj: any): boolean {\r\n    return obj instanceof RxCollectionBase;\r\n}\r\n"],"mappings":"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","ignoreList":[]}