{"version":3,"file":"change-event-buffer.js","names":["filter","appendToArray","requestIdlePromiseNoQueue","ChangeEventBuffer","collection","subs","counter","eventCounterMap","WeakMap","buffer","limit","tasks","Set","push","database","eventBulks$","pipe","changeEventBulk","collectionName","name","bulk","first","events","isLocal","subscribe","eventBulk","add","_handleChangeEvents","size","then","processTasks","_proto","prototype","Array","from","forEach","task","clear","counterBefore","length","slice","counterBase","index","event","set","getCounter","getBuffer","getArrayIndexByPointer","pointer","oldestEvent","oldestCounter","get","rest","getFrom","ret","currentIndex","nextEvent","runFrom","fn","Error","cE","reduceByLastOfDoc","changeEvents","docEventMap","changeEvent","documentId","Object","values","destroy","sub","unsubscribe","createChangeEventBuffer"],"sources":["../../src/change-event-buffer.ts"],"sourcesContent":["/**\r\n * a buffer-cache which holds the last X changeEvents of the collection\r\n */\r\nimport {\r\n    Subscription\r\n} from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport type {\r\n    RxChangeEvent,\r\n    RxCollection\r\n} from './types/index.d.ts';\r\nimport {\r\n    appendToArray,\r\n    requestIdlePromiseNoQueue\r\n} from './plugins/utils/index.ts';\r\n\r\n/**\r\n * This buffer rembemers previous change events\r\n * so that queries can use them on .exec()\r\n * to calculate the new result set via event-reduce instead\r\n * of running the query against the storage.\r\n */\r\nexport class ChangeEventBuffer<RxDocType> {\r\n    /**\r\n     * These properties are private to ensure they cannot\r\n     * be read without first processing the lazy tasks.\r\n     */\r\n    private subs: Subscription[] = [];\r\n    private counter: number = 0;\r\n    private eventCounterMap: WeakMap<\r\n        RxChangeEvent<RxDocType>, number\r\n    > = new WeakMap();\r\n    /**\r\n     * array with changeEvents\r\n     * starts with oldest known event, ends with newest\r\n    */\r\n    private buffer: RxChangeEvent<RxDocType>[] = [];\r\n\r\n    public limit: number = 100;\r\n\r\n\r\n\r\n    private tasks = new Set<Function>();\r\n\r\n    constructor(\r\n        public collection: RxCollection\r\n    ) {\r\n        this.subs.push(\r\n            this.collection.database.eventBulks$.pipe(\r\n                filter(changeEventBulk => changeEventBulk.collectionName === this.collection.name),\r\n                filter(bulk => {\r\n                    const first = bulk.events[0];\r\n                    return !first.isLocal;\r\n                })\r\n            ).subscribe(eventBulk => {\r\n                this.tasks.add(() => this._handleChangeEvents(eventBulk.events));\r\n                if (this.tasks.size <= 1) {\r\n                    requestIdlePromiseNoQueue().then(() => {\r\n                        this.processTasks();\r\n                    });\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    private processTasks() {\r\n        if (this.tasks.size === 0) {\r\n            return;\r\n        }\r\n        const tasks = Array.from(this.tasks);\r\n        tasks.forEach(task => task());\r\n        this.tasks.clear();\r\n    }\r\n\r\n    private _handleChangeEvents(events: RxChangeEvent<RxDocType>[]) {\r\n        const counterBefore = this.counter;\r\n        this.counter = this.counter + events.length;\r\n        if (events.length > this.limit) {\r\n            this.buffer = events.slice(events.length * -1);\r\n        } else {\r\n            appendToArray(this.buffer, events);\r\n            this.buffer = this.buffer.slice(this.limit * -1);\r\n        }\r\n        const counterBase = counterBefore + 1;\r\n        const eventCounterMap = this.eventCounterMap;\r\n        for (let index = 0; index < events.length; index++) {\r\n            const event = events[index];\r\n            eventCounterMap.set(event, counterBase + index);\r\n        }\r\n    }\r\n\r\n    getCounter() {\r\n        this.processTasks();\r\n        return this.counter;\r\n    }\r\n    getBuffer() {\r\n        this.processTasks();\r\n        return this.buffer;\r\n    }\r\n\r\n    /**\r\n     * gets the array-index for the given pointer\r\n     * @return arrayIndex which can be used to iterate from there. If null, pointer is out of lower bound\r\n     */\r\n    getArrayIndexByPointer(pointer: number): number | null {\r\n        this.processTasks();\r\n        const oldestEvent = this.buffer[0];\r\n        const oldestCounter = this.eventCounterMap.get(\r\n            oldestEvent\r\n        ) as number;\r\n\r\n        if (pointer < oldestCounter)\r\n            return null; // out of bounds\r\n\r\n        const rest = pointer - oldestCounter;\r\n        return rest;\r\n    }\r\n\r\n    /**\r\n     * get all changeEvents which came in later than the pointer-event\r\n     * @return array with change-events. If null, pointer out of bounds\r\n     */\r\n    getFrom(pointer: number): RxChangeEvent<RxDocType>[] | null {\r\n        this.processTasks();\r\n        const ret = [];\r\n        let currentIndex = this.getArrayIndexByPointer(pointer);\r\n        if (currentIndex === null) // out of bounds\r\n            return null;\r\n\r\n        while (true) {\r\n            const nextEvent = this.buffer[currentIndex];\r\n            currentIndex++;\r\n            if (!nextEvent) {\r\n                return ret;\r\n            } else {\r\n                ret.push(nextEvent);\r\n            }\r\n        }\r\n    }\r\n\r\n    runFrom(pointer: number, fn: Function) {\r\n        this.processTasks();\r\n        const ret = this.getFrom(pointer);\r\n        if (ret === null) {\r\n            throw new Error('out of bounds');\r\n        } else {\r\n            ret.forEach(cE => fn(cE));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * no matter how many operations are done on one document,\r\n     * only the last operation has to be checked to calculate the new state\r\n     * this function reduces the events to the last ChangeEvent of each doc\r\n     */\r\n    reduceByLastOfDoc(changeEvents: RxChangeEvent<RxDocType>[]): RxChangeEvent<RxDocType>[] {\r\n        this.processTasks();\r\n        return changeEvents.slice(0);\r\n        // TODO the old implementation was wrong\r\n        // because it did not correctly reassigned the previousData of the changeevents\r\n        // this should be added to the event-reduce library and not be done in RxDB\r\n        const docEventMap: any = {};\r\n        changeEvents.forEach(changeEvent => {\r\n            docEventMap[changeEvent.documentId] = changeEvent;\r\n        });\r\n        return Object.values(docEventMap);\r\n    }\r\n\r\n    destroy() {\r\n        this.tasks.clear();\r\n        this.subs.forEach(sub => sub.unsubscribe());\r\n    }\r\n}\r\n\r\nexport function createChangeEventBuffer<RxdocType>(\r\n    collection: RxCollection<RxdocType, any>\r\n) {\r\n    return new ChangeEventBuffer<RxdocType>(collection);\r\n}\r\n"],"mappings":"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","ignoreList":[]}