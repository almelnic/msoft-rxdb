{"version":3,"file":"hooks.js","names":["HOOKS","preAddRxPlugin","preCreateRxDatabase","createRxDatabase","preCreateRxCollection","createRxCollection","createRxState","postDestroyRxCollection","postRemoveRxCollection","preCreateRxSchema","createRxSchema","preCreateRxQuery","prePrepareQuery","createRxDocument","postCreateRxDocument","preCreateRxStorageInstance","preStorageWrite","preMigrateDocument","postMigrateDocument","preDestroyRxDatabase","postRemoveRxDatabase","postCleanup","preReplicationMasterWrite","preReplicationMasterWriteDocumentsHandle","runPluginHooks","hookKey","obj","length","forEach","fun","runAsyncPluginHooks","Promise","all","map","_clearHook","type","filter","h"],"sources":["../../src/hooks.ts"],"sourcesContent":["\r\n/**\r\n * hook-functions that can be extended by the plugin\r\n */\r\nexport const HOOKS: { [k: string]: any[]; } = {\r\n    /**\r\n     * Runs before a plugin is added.\r\n     * Use this to block the usage of non-compatible plugins.\r\n     */\r\n    preAddRxPlugin: [],\r\n    /**\r\n     * functions that run before the database is created\r\n     */\r\n    preCreateRxDatabase: [],\r\n    /**\r\n     * runs after the database is created and prepared\r\n     * but before the instance is returned to the user\r\n     * @async\r\n     */\r\n    createRxDatabase: [],\r\n    preCreateRxCollection: [],\r\n    createRxCollection: [],\r\n    createRxState: [],\r\n    /**\r\n    * runs at the end of the destroy-process of a collection\r\n    * @async\r\n    */\r\n    postDestroyRxCollection: [],\r\n    /**\r\n     * Runs after a collection is removed.\r\n     * @async\r\n     */\r\n    postRemoveRxCollection: [],\r\n    /**\r\n      * functions that get the json-schema as input\r\n      * to do additionally checks/manipulation\r\n      */\r\n    preCreateRxSchema: [],\r\n    /**\r\n     * functions that run after the RxSchema is created\r\n     * gets RxSchema as attribute\r\n     */\r\n    createRxSchema: [],\r\n    preCreateRxQuery: [],\r\n    /**\r\n     * Runs before a query is send to the\r\n     * prepareQuery function of the storage engine.\r\n     */\r\n    prePrepareQuery: [],\r\n    createRxDocument: [],\r\n    /**\r\n     * runs after a RxDocument is created,\r\n     * cannot be async\r\n     */\r\n    postCreateRxDocument: [],\r\n    /**\r\n     * Runs before a RxStorageInstance is created\r\n     * gets the params of createStorageInstance()\r\n     * as attribute so you can manipulate them.\r\n     * Notice that you have to clone stuff before mutating the inputs.\r\n     */\r\n    preCreateRxStorageInstance: [],\r\n    preStorageWrite: [],\r\n    /**\r\n     * runs on the document-data before the document is migrated\r\n     * {\r\n     *   doc: Object, // original doc-data\r\n     *   migrated: // migrated doc-data after run through migration-strategies\r\n     * }\r\n     */\r\n    preMigrateDocument: [],\r\n    /**\r\n     * runs after the migration of a document has been done\r\n     */\r\n    postMigrateDocument: [],\r\n    /**\r\n     * runs at the beginning of the destroy-process of a database\r\n     */\r\n    preDestroyRxDatabase: [],\r\n    /**\r\n     * runs after a database has been removed\r\n     * @async\r\n     */\r\n    postRemoveRxDatabase: [],\r\n\r\n\r\n    postCleanup: [],\r\n\r\n    /**\r\n     * runs before the replication writes the rows to master\r\n     * but before the rows have been modified\r\n     * @async\r\n     */\r\n    preReplicationMasterWrite: [],\r\n\r\n    /**\r\n     * runs after the replication has been sent to the server\r\n     * but before the new documents have been handled\r\n     * @async\r\n     */\r\n    preReplicationMasterWriteDocumentsHandle: [],\r\n};\r\n\r\nexport function runPluginHooks(hookKey: string, obj: any) {\r\n    if (HOOKS[hookKey].length > 0) {\r\n        HOOKS[hookKey].forEach(fun => fun(obj));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * TODO\r\n * we should not run the hooks in parallel\r\n * this makes stuff unpredictable.\r\n */\r\nexport function runAsyncPluginHooks(hookKey: string, obj: any): Promise<any> {\r\n    return Promise.all(\r\n        HOOKS[hookKey].map(fun => fun(obj))\r\n    );\r\n}\r\n\r\n/**\r\n * used in tests to remove hooks\r\n */\r\nexport function _clearHook(type: string, fun: Function) {\r\n    HOOKS[type] = HOOKS[type].filter(h => h !== fun);\r\n}\r\n"],"mappings":"AACA;AACA;AACA;AACA,OAAO,IAAMA,KAA8B,GAAG;EAC1C;AACJ;AACA;AACA;EACIC,cAAc,EAAE,EAAE;EAClB;AACJ;AACA;EACIC,mBAAmB,EAAE,EAAE;EACvB;AACJ;AACA;AACA;AACA;EACIC,gBAAgB,EAAE,EAAE;EACpBC,qBAAqB,EAAE,EAAE;EACzBC,kBAAkB,EAAE,EAAE;EACtBC,aAAa,EAAE,EAAE;EACjB;AACJ;AACA;AACA;EACIC,uBAAuB,EAAE,EAAE;EAC3B;AACJ;AACA;AACA;EACIC,sBAAsB,EAAE,EAAE;EAC1B;AACJ;AACA;AACA;EACIC,iBAAiB,EAAE,EAAE;EACrB;AACJ;AACA;AACA;EACIC,cAAc,EAAE,EAAE;EAClBC,gBAAgB,EAAE,EAAE;EACpB;AACJ;AACA;AACA;EACIC,eAAe,EAAE,EAAE;EACnBC,gBAAgB,EAAE,EAAE;EACpB;AACJ;AACA;AACA;EACIC,oBAAoB,EAAE,EAAE;EACxB;AACJ;AACA;AACA;AACA;AACA;EACIC,0BAA0B,EAAE,EAAE;EAC9BC,eAAe,EAAE,EAAE;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,kBAAkB,EAAE,EAAE;EACtB;AACJ;AACA;EACIC,mBAAmB,EAAE,EAAE;EACvB;AACJ;AACA;EACIC,oBAAoB,EAAE,EAAE;EACxB;AACJ;AACA;AACA;EACIC,oBAAoB,EAAE,EAAE;EAGxBC,WAAW,EAAE,EAAE;EAEf;AACJ;AACA;AACA;AACA;EACIC,yBAAyB,EAAE,EAAE;EAE7B;AACJ;AACA;AACA;AACA;EACIC,wCAAwC,EAAE;AAC9C,CAAC;AAED,OAAO,SAASC,cAAcA,CAACC,OAAe,EAAEC,GAAQ,EAAE;EACtD,IAAI1B,KAAK,CAACyB,OAAO,CAAC,CAACE,MAAM,GAAG,CAAC,EAAE;IAC3B3B,KAAK,CAACyB,OAAO,CAAC,CAACG,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACH,GAAG,CAAC,CAAC;EAC3C;AACJ;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,mBAAmBA,CAACL,OAAe,EAAEC,GAAQ,EAAgB;EACzE,OAAOK,OAAO,CAACC,GAAG,CACdhC,KAAK,CAACyB,OAAO,CAAC,CAACQ,GAAG,CAACJ,GAAG,IAAIA,GAAG,CAACH,GAAG,CAAC,CACtC,CAAC;AACL;;AAEA;AACA;AACA;AACA,OAAO,SAASQ,UAAUA,CAACC,IAAY,EAAEN,GAAa,EAAE;EACpD7B,KAAK,CAACmC,IAAI,CAAC,GAAGnC,KAAK,CAACmC,IAAI,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKR,GAAG,CAAC;AACpD","ignoreList":[]}