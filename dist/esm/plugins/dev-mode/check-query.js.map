{"version":3,"file":"check-query.js","names":["newRxError","newRxTypeError","deepEqual","prepareQuery","checkQuery","args","isPlainObject","Object","prototype","toString","call","queryObj","op","collection","name","validKeys","keys","forEach","key","includes","limit","skip","query","ensureObjectDoesNotContainRegExp","checkMangoQuery","schema","rxQuery","jsonSchema","massagedSelector","mangoQuery","selector","schemaTopLevelFields","properties","filter","fieldOrOperator","startsWith","field","schemaIndexes","indexes","index","isInSchema","find","schemaIndex","areSelectorsSatisfiedByIndex","database","allowSlowCount","sort","map","sortPart","preparedQuery","queryPlan","selectorSatisfiedByIndex","value","RegExp","Array","isArray","item"],"sources":["../../../../src/plugins/dev-mode/check-query.ts"],"sourcesContent":["import type {\r\n    RxPluginPreCreateRxQueryArgs,\r\n    MangoQuery,\r\n    RxPluginPrePrepareQueryArgs,\r\n    FilledMangoQuery,\r\n    RxJsonSchema,\r\n    RxDocumentData,\r\n    MangoQuerySelector,\r\n    PreparedQuery\r\n} from '../../types/index.d.ts';\r\nimport { newRxError, newRxTypeError } from '../../rx-error.ts';\r\nimport { deepEqual } from '../utils/index.ts';\r\nimport { prepareQuery } from '../../rx-query.ts';\r\n\r\n/**\r\n * accidentally passing a non-valid object into the query params\r\n * is very hard to debug especially when queries are observed\r\n * This is why we do some checks here in dev-mode\r\n */\r\nexport function checkQuery(args: RxPluginPreCreateRxQueryArgs) {\r\n    const isPlainObject = Object.prototype.toString.call(args.queryObj) === '[object Object]';\r\n    if (!isPlainObject) {\r\n        throw newRxTypeError('QU11', {\r\n            op: args.op,\r\n            collection: args.collection.name,\r\n            queryObj: args.queryObj\r\n        });\r\n    }\r\n\r\n    const validKeys: (keyof MangoQuery)[] = [\r\n        'selector',\r\n        'limit',\r\n        'skip',\r\n        'sort',\r\n        'index'\r\n    ];\r\n    Object.keys(args.queryObj).forEach(key => {\r\n        if (!(validKeys as string[]).includes(key)) {\r\n            throw newRxTypeError('QU11', {\r\n                op: args.op,\r\n                collection: args.collection.name,\r\n                queryObj: args.queryObj,\r\n                key,\r\n                args: {\r\n                    validKeys\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    // do not allow skip or limit for count queries\r\n    if (\r\n        args.op === 'count' &&\r\n        (\r\n            args.queryObj.limit ||\r\n            args.queryObj.skip\r\n        )\r\n    ) {\r\n        throw newRxError(\r\n            'QU15',\r\n            {\r\n                collection: args.collection.name,\r\n                query: args.queryObj\r\n            }\r\n        );\r\n    }\r\n\r\n    ensureObjectDoesNotContainRegExp(args.queryObj);\r\n}\r\n\r\n\r\nexport function checkMangoQuery(args: RxPluginPrePrepareQueryArgs) {\r\n    const schema = args.rxQuery.collection.schema.jsonSchema;\r\n\r\n    /**\r\n     * Ensure that all top level fields are included in the schema.\r\n     * TODO this check can be augmented to also check sub-fields.\r\n     */\r\n    const massagedSelector: MangoQuerySelector<any> = args.mangoQuery.selector;\r\n    const schemaTopLevelFields = Object.keys(schema.properties);\r\n    Object.keys(massagedSelector)\r\n        // do not check operators\r\n        .filter(fieldOrOperator => !fieldOrOperator.startsWith('$'))\r\n        // skip this check on non-top-level fields\r\n        .filter(field => !field.includes('.'))\r\n        .forEach(field => {\r\n            if (!schemaTopLevelFields.includes(field)) {\r\n                throw newRxError('QU13', {\r\n                    schema,\r\n                    field,\r\n                    query: args.mangoQuery,\r\n                });\r\n            }\r\n        });\r\n\r\n    /**\r\n     * ensure if custom index is set,\r\n     * it is also defined in the schema\r\n     */\r\n    const schemaIndexes = schema.indexes ? schema.indexes : [];\r\n    const index = args.mangoQuery.index;\r\n    if (index) {\r\n        const isInSchema = schemaIndexes.find(schemaIndex => deepEqual(schemaIndex, index));\r\n        if (!isInSchema) {\r\n            throw newRxError(\r\n                'QU12',\r\n                {\r\n                    collection: args.rxQuery.collection.name,\r\n                    query: args.mangoQuery,\r\n                    schema\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Ensure that a count() query can only be used\r\n     * with selectors that are fully satisfied by the used index.\r\n     */\r\n    if (args.rxQuery.op === 'count') {\r\n        if (\r\n            !areSelectorsSatisfiedByIndex(\r\n                args.rxQuery.collection.schema.jsonSchema,\r\n                args.mangoQuery\r\n            ) &&\r\n            !args.rxQuery.collection.database.allowSlowCount\r\n        ) {\r\n            throw newRxError('QU14', {\r\n                collection: args.rxQuery.collection,\r\n                query: args.mangoQuery\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ensure that sort only runs on known fields\r\n     * TODO also check nested fields\r\n     */\r\n    if (args.mangoQuery.sort) {\r\n        args.mangoQuery.sort\r\n            .map(sortPart => Object.keys(sortPart)[0])\r\n            .filter(field => !field.includes('.'))\r\n            .forEach(field => {\r\n                if (!schemaTopLevelFields.includes(field)) {\r\n                    throw newRxError('QU13', {\r\n                        schema,\r\n                        field,\r\n                        query: args.mangoQuery,\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    // Do not allow RexExp instances\r\n    ensureObjectDoesNotContainRegExp(args.mangoQuery);\r\n}\r\n\r\n\r\nexport function areSelectorsSatisfiedByIndex<RxDocType>(\r\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\r\n    query: FilledMangoQuery<RxDocType>\r\n): boolean {\r\n    const preparedQuery: PreparedQuery<any> = prepareQuery(\r\n        schema,\r\n        query\r\n    );\r\n    return preparedQuery.queryPlan.selectorSatisfiedByIndex;\r\n}\r\n\r\n/**\r\n * Ensures that the selector does not contain any RegExp instance.\r\n * @recursive\r\n */\r\nexport function ensureObjectDoesNotContainRegExp(selector: any) {\r\n    if (typeof selector !== 'object' || selector === null) {\r\n        return;\r\n    }\r\n    const keys = Object.keys(selector);\r\n    keys.forEach(key => {\r\n        const value: any = selector[key];\r\n        if (value instanceof RegExp) {\r\n            throw newRxError('QU16', {\r\n                field: key,\r\n                query: selector,\r\n            });\r\n        } else if (Array.isArray(value)) {\r\n            value.forEach(item => ensureObjectDoesNotContainRegExp(item));\r\n        } else {\r\n            ensureObjectDoesNotContainRegExp(value);\r\n        }\r\n    });\r\n}\r\n"],"mappings":"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","ignoreList":[]}