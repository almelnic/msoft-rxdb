{"version":3,"file":"humans-collection.js","names":["clone","schemas","schemaObjects","getConfig","assert","createRxDatabase","randomCouchString","create","size","collectionName","multiInstance","eventReduce","storage","getStorage","db","name","ignoreDuplicate","localDocuments","collections","addCollections","schema","human","docsData","Array","fill","map","humanData","writeResult","bulkInsert","deepStrictEqual","error","createBySchema","migrationStrategies","createAttachments","schemaJson","attachments","createNoCompression","schemaJSON","keyCompression","createAgeIndex","amount","humana","humanAgeIndex","multipleOnSameDB","human2","docsData2","collection","collection2","createNested","nestedhuman","nestedHuman","nestedHumanData","createDeepNested","deepNestedHuman","deepNestedHumanData","createMultiInstance","password","undefined","hasMultiInstance","Error","createPrimary","primaryHuman","simpleHumanData","createHumanWithTimestamp","databaseName","humans","humanWithTimestamp","humanWithTimestampData","createMigrationCollection","addMigrationStrategies","autoMigrate","attachment","Object","assign","doc","colName","cols","simpleHuman","Promise","all","insert","simpleHumanAge","then","putAttachment","destroy","db2","cols2","simpleHumanV3","createRelated","refHuman","doc1","refHumanData","doc2","bestFriend","createRelatedNested","refHumanNested","refHumanNestedData","foo","createIdAndAgeIndex","humanIdAndAgeIndex","humanWithIdAndAgeIndexDocumentType"],"sources":["../../../../src/plugins/test-utils/humans-collection.ts"],"sourcesContent":["import clone from 'clone';\r\nimport * as schemas from './schemas.ts';\r\nimport * as schemaObjects from './schema-objects.ts';\r\nimport { getConfig } from './config.ts';\r\nimport assert from 'assert';\r\n\r\nimport {\r\n    createRxDatabase,\r\n    RxJsonSchema,\r\n    RxCollection,\r\n    RxDatabase,\r\n    randomCouchString,\r\n    MigrationStrategies,\r\n    RxAttachmentCreator,\r\n    RxStorage\r\n} from '../../index.ts';\r\n\r\nimport { HumanDocumentType } from './schemas.ts';\r\n\r\nexport async function create(\r\n    size: number = 20,\r\n    collectionName: string = 'human',\r\n    multiInstance: boolean = true,\r\n    eventReduce: boolean = true,\r\n    storage: RxStorage<any, any> = getConfig().storage.getStorage()\r\n\r\n): Promise<RxCollection<HumanDocumentType, {}, {}>> {\r\n    const db = await createRxDatabase<{ human: RxCollection<HumanDocumentType>; }>({\r\n        name: randomCouchString(10),\r\n        storage,\r\n        multiInstance,\r\n        eventReduce,\r\n        ignoreDuplicate: true,\r\n        localDocuments: true\r\n    });\r\n\r\n    const collections = await db.addCollections({\r\n        [collectionName]: {\r\n            schema: schemas.human,\r\n            localDocuments: true\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (size > 0) {\r\n        const docsData = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        const writeResult = await collections[collectionName].bulkInsert(docsData);\r\n        assert.deepStrictEqual(writeResult.error, []);\r\n    }\r\n    return collections[collectionName];\r\n}\r\n\r\nexport async function createBySchema<RxDocumentType = {}>(\r\n    schema: RxJsonSchema<RxDocumentType>,\r\n    name = 'human',\r\n    storage = getConfig().storage.getStorage(),\r\n    migrationStrategies?: MigrationStrategies\r\n): Promise<RxCollection<RxDocumentType, {}, {}>> {\r\n    const db = await createRxDatabase<{ [prop: string]: RxCollection<RxDocumentType>; }>({\r\n        name: randomCouchString(10),\r\n        storage,\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n\r\n    const collections = await db.addCollections({\r\n        [name]: {\r\n            schema,\r\n            migrationStrategies\r\n        }\r\n    });\r\n\r\n    return collections[name];\r\n}\r\n\r\nexport async function createAttachments(\r\n    size = 20,\r\n    name = 'human',\r\n    multiInstance = true\r\n): Promise<RxCollection<HumanDocumentType, {}, {}>> {\r\n    if (!name) {\r\n        name = 'human';\r\n    }\r\n    const db = await createRxDatabase<{ [prop: string]: RxCollection<HumanDocumentType>; }>({\r\n        name: randomCouchString(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        multiInstance,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n\r\n    const schemaJson = clone(schemas.human);\r\n    schemaJson.attachments = {};\r\n\r\n    const collections = await db.addCollections({\r\n        [name]: {\r\n            schema: schemaJson\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (size > 0) {\r\n        const docsData = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections[name].bulkInsert(docsData);\r\n    }\r\n\r\n    return collections[name];\r\n}\r\n\r\nexport async function createNoCompression(\r\n    size = 20,\r\n    name = 'human'\r\n): Promise<RxCollection<HumanDocumentType>> {\r\n    const db = await createRxDatabase<{ [prop: string]: RxCollection<HumanDocumentType>; }>({\r\n        name: randomCouchString(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    const schemaJSON = clone(schemas.human);\r\n    schemaJSON.keyCompression = false;\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        [name]: {\r\n            schema: schemaJSON\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (size > 0) {\r\n        const docsData = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections[name].bulkInsert(docsData);\r\n    }\r\n\r\n    return collections[name];\r\n}\r\n\r\nexport async function createAgeIndex(\r\n    amount = 20\r\n): Promise<RxCollection<HumanDocumentType>> {\r\n    const db = await createRxDatabase<{ humana: RxCollection<HumanDocumentType>; }>({\r\n        name: randomCouchString(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        humana: {\r\n            schema: schemas.humanAgeIndex\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections.humana.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.humana;\r\n}\r\n\r\nexport async function multipleOnSameDB(\r\n    size = 10\r\n): Promise<{\r\n    db: RxDatabase<{\r\n        human: RxCollection<HumanDocumentType>;\r\n        human2: RxCollection<HumanDocumentType>;\r\n    }>;\r\n    collection: RxCollection<HumanDocumentType>;\r\n    collection2: RxCollection<HumanDocumentType>;\r\n}> {\r\n    const db = await createRxDatabase<{\r\n        human: RxCollection<HumanDocumentType>;\r\n        human2: RxCollection<HumanDocumentType>;\r\n    }>({\r\n        name: randomCouchString(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.human\r\n        },\r\n        human2: {\r\n            schema: schemas.human\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (size > 0) {\r\n        const docsData = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections.human.bulkInsert(docsData);\r\n\r\n        const docsData2 = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections.human2.bulkInsert(docsData2);\r\n    }\r\n\r\n    return {\r\n        db,\r\n        collection: collections.human,\r\n        collection2: collections.human2\r\n    };\r\n}\r\n\r\nexport async function createNested(\r\n    amount = 5\r\n): Promise<RxCollection<schemaObjects.NestedHumanDocumentType>> {\r\n    const db = await createRxDatabase<{ nestedhuman: RxCollection<schemaObjects.NestedHumanDocumentType>; }>({\r\n        name: randomCouchString(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        nestedhuman: {\r\n            schema: schemas.nestedHuman\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.nestedHumanData());\r\n        await collections.nestedhuman.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.nestedhuman;\r\n}\r\n\r\nexport async function createDeepNested(\r\n    amount = 5\r\n): Promise<RxCollection<schemaObjects.DeepNestedHumanDocumentType>> {\r\n    const db = await createRxDatabase<{ nestedhuman: RxCollection<schemaObjects.DeepNestedHumanDocumentType>; }>({\r\n        name: randomCouchString(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        nestedhuman: {\r\n            schema: schemas.deepNestedHuman\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.deepNestedHumanData());\r\n        await collections.nestedhuman.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.nestedhuman;\r\n}\r\n\r\nexport async function createMultiInstance(\r\n    name: string,\r\n    amount = 0,\r\n    password = undefined,\r\n    storage: RxStorage<any, any> = getConfig().storage.getStorage()\r\n): Promise<RxCollection<HumanDocumentType, {}, {}>> {\r\n    if (!getConfig().storage.hasMultiInstance) {\r\n        throw new Error('createMultiInstance() cannot be called on a storage with hasMultiInstance:false');\r\n    }\r\n\r\n    const db = await createRxDatabase<{ human: RxCollection<HumanDocumentType>; }>({\r\n        name,\r\n        storage,\r\n        password,\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true,\r\n        localDocuments: true\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.human,\r\n            localDocuments: true\r\n        }\r\n    });\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections.human.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.human;\r\n}\r\n\r\nexport async function createPrimary(\r\n    amount = 10,\r\n    name = randomCouchString(10)\r\n): Promise<RxCollection<schemaObjects.SimpleHumanDocumentType>> {\r\n\r\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.SimpleHumanDocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.primaryHuman\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.simpleHumanData());\r\n        await collections.human.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.human;\r\n}\r\n\r\nexport async function createHumanWithTimestamp(\r\n    amount = 0,\r\n    databaseName = randomCouchString(10),\r\n    multiInstance = true,\r\n    storage = getConfig().storage.getStorage()\r\n): Promise<RxCollection<schemaObjects.HumanWithTimestampDocumentType>> {\r\n\r\n    const db = await createRxDatabase<{ humans: RxCollection<schemaObjects.HumanWithTimestampDocumentType>; }>({\r\n        name: databaseName,\r\n        storage,\r\n        multiInstance,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        humans: {\r\n            schema: schemas.humanWithTimestamp\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanWithTimestampData());\r\n        await collections.humans.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.humans;\r\n}\r\n\r\nexport async function createMigrationCollection(\r\n    amount = 0,\r\n    addMigrationStrategies: MigrationStrategies = {},\r\n    name = randomCouchString(10),\r\n    autoMigrate = false,\r\n    attachment?: RxAttachmentCreator\r\n): Promise<RxCollection<schemaObjects.SimpleHumanV3DocumentType>> {\r\n\r\n    const migrationStrategies: any = Object.assign(\r\n        {\r\n            1: (doc: any) => doc,\r\n            2: (doc: any) => doc,\r\n            3: (doc: any) => doc\r\n        },\r\n        addMigrationStrategies\r\n    );\r\n\r\n\r\n    const colName = 'human';\r\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.SimpleHumanAgeDocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    const cols = await db.addCollections({\r\n        [colName]: {\r\n            schema: attachment !== undefined ? { ...schemas.simpleHuman, attachments: {} } : schemas.simpleHuman,\r\n            autoMigrate: false\r\n        }\r\n    });\r\n\r\n    await Promise.all(\r\n        new Array(amount)\r\n            .fill(0)\r\n            .map(() => cols[colName].insert(schemaObjects.simpleHumanAge()).then(doc => {\r\n                if (attachment !== undefined) {\r\n                    return doc.putAttachment(attachment);\r\n                }\r\n            }))\r\n    );\r\n    await db.destroy();\r\n\r\n    const db2 = await createRxDatabase<{ human: RxCollection<schemaObjects.SimpleHumanV3DocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    const cols2 = await db2.addCollections({\r\n        [colName]: {\r\n            schema: attachment !== undefined ? { ...schemas.simpleHumanV3, attachments: {} } : schemas.simpleHumanV3,\r\n            autoMigrate,\r\n            migrationStrategies\r\n        }\r\n    });\r\n\r\n    return cols2[colName];\r\n}\r\n\r\nexport async function createRelated(\r\n    name = randomCouchString(10)\r\n): Promise<RxCollection<schemaObjects.RefHumanDocumentType>> {\r\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.RefHumanDocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.refHuman\r\n        }\r\n    });\r\n\r\n    const doc1 = schemaObjects.refHumanData();\r\n    const doc2 = schemaObjects.refHumanData(doc1.name);\r\n    doc1.bestFriend = doc2.name; // cross-relation\r\n\r\n    await collections.human.insert(doc1);\r\n    await collections.human.insert(doc2);\r\n\r\n    return collections.human;\r\n}\r\n\r\nexport async function createRelatedNested(\r\n    name = randomCouchString(10)\r\n): Promise<RxCollection<schemaObjects.RefHumanNestedDocumentType>> {\r\n\r\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.RefHumanNestedDocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.refHumanNested\r\n        }\r\n    });\r\n\r\n    const doc1 = schemaObjects.refHumanNestedData();\r\n    const doc2 = schemaObjects.refHumanNestedData(doc1.name);\r\n    doc1.foo.bestFriend = doc2.name; // cross-relation\r\n\r\n    await collections.human.insert(doc1);\r\n    await collections.human.insert(doc2);\r\n\r\n    return collections.human;\r\n}\r\n\r\nexport async function createIdAndAgeIndex(\r\n    amount = 20\r\n): Promise<RxCollection<schemaObjects.HumanWithIdAndAgeIndexDocumentType>> {\r\n    const db = await createRxDatabase<{ humana: RxCollection<schemaObjects.HumanWithIdAndAgeIndexDocumentType>; }>({\r\n        name: randomCouchString(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.destroy(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        humana: {\r\n            schema: schemas.humanIdAndAgeIndex\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanWithIdAndAgeIndexDocumentType());\r\n        await collections.humana.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.humana;\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,OAAO,KAAKC,aAAa,MAAM,qBAAqB;AACpD,SAASC,SAAS,QAAQ,aAAa;AACvC,OAAOC,MAAM,MAAM,QAAQ;AAE3B,SACIC,gBAAgB,EAIhBC,iBAAiB,QAId,gBAAgB;AAIvB,OAAO,eAAeC,MAAMA,CACxBC,IAAY,GAAG,EAAE,EACjBC,cAAsB,GAAG,OAAO,EAChCC,aAAsB,GAAG,IAAI,EAC7BC,WAAoB,GAAG,IAAI,EAC3BC,OAA4B,GAAGT,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC,EAEf;EAChD,IAAMC,EAAE,GAAG,MAAMT,gBAAgB,CAA8C;IAC3EU,IAAI,EAAET,iBAAiB,CAAC,EAAE,CAAC;IAC3BM,OAAO;IACPF,aAAa;IACbC,WAAW;IACXK,eAAe,EAAE,IAAI;IACrBC,cAAc,EAAE;EACpB,CAAC,CAAC;EAEF,IAAMC,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxC,CAACV,cAAc,GAAG;MACdW,MAAM,EAAEnB,OAAO,CAACoB,KAAK;MACrBJ,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;;EAEF;EACA,IAAIT,IAAI,GAAG,CAAC,EAAE;IACV,IAAMc,QAAQ,GAAG,IAAIC,KAAK,CAACf,IAAI,CAAC,CAC3BgB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACwB,SAAS,CAAC,CAAC,CAAC;IACzC,IAAMC,WAAW,GAAG,MAAMT,WAAW,CAACT,cAAc,CAAC,CAACmB,UAAU,CAACN,QAAQ,CAAC;IAC1ElB,MAAM,CAACyB,eAAe,CAACF,WAAW,CAACG,KAAK,EAAE,EAAE,CAAC;EACjD;EACA,OAAOZ,WAAW,CAACT,cAAc,CAAC;AACtC;AAEA,OAAO,eAAesB,cAAcA,CAChCX,MAAoC,EACpCL,IAAI,GAAG,OAAO,EACdH,OAAO,GAAGT,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC,EAC1CmB,mBAAyC,EACI;EAC7C,IAAMlB,EAAE,GAAG,MAAMT,gBAAgB,CAAoD;IACjFU,IAAI,EAAET,iBAAiB,CAAC,EAAE,CAAC;IAC3BM,OAAO;IACPF,aAAa,EAAE,IAAI;IACnBC,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EAEF,IAAME,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxC,CAACJ,IAAI,GAAG;MACJK,MAAM;MACNY;IACJ;EACJ,CAAC,CAAC;EAEF,OAAOd,WAAW,CAACH,IAAI,CAAC;AAC5B;AAEA,OAAO,eAAekB,iBAAiBA,CACnCzB,IAAI,GAAG,EAAE,EACTO,IAAI,GAAG,OAAO,EACdL,aAAa,GAAG,IAAI,EAC4B;EAChD,IAAI,CAACK,IAAI,EAAE;IACPA,IAAI,GAAG,OAAO;EAClB;EACA,IAAMD,EAAE,GAAG,MAAMT,gBAAgB,CAAuD;IACpFU,IAAI,EAAET,iBAAiB,CAAC,EAAE,CAAC;IAC3BM,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCH,aAAa;IACbC,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EAEF,IAAMkB,UAAU,GAAGlC,KAAK,CAACC,OAAO,CAACoB,KAAK,CAAC;EACvCa,UAAU,CAACC,WAAW,GAAG,CAAC,CAAC;EAE3B,IAAMjB,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxC,CAACJ,IAAI,GAAG;MACJK,MAAM,EAAEc;IACZ;EACJ,CAAC,CAAC;;EAEF;EACA,IAAI1B,IAAI,GAAG,CAAC,EAAE;IACV,IAAMc,QAAQ,GAAG,IAAIC,KAAK,CAACf,IAAI,CAAC,CAC3BgB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACwB,SAAS,CAAC,CAAC,CAAC;IACzC,MAAMR,WAAW,CAACH,IAAI,CAAC,CAACa,UAAU,CAACN,QAAQ,CAAC;EAChD;EAEA,OAAOJ,WAAW,CAACH,IAAI,CAAC;AAC5B;AAEA,OAAO,eAAeqB,mBAAmBA,CACrC5B,IAAI,GAAG,EAAE,EACTO,IAAI,GAAG,OAAO,EAC0B;EACxC,IAAMD,EAAE,GAAG,MAAMT,gBAAgB,CAAuD;IACpFU,IAAI,EAAET,iBAAiB,CAAC,EAAE,CAAC;IAC3BM,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCF,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF,IAAMqB,UAAU,GAAGrC,KAAK,CAACC,OAAO,CAACoB,KAAK,CAAC;EACvCgB,UAAU,CAACC,cAAc,GAAG,KAAK;EACjC;EACA,IAAMpB,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxC,CAACJ,IAAI,GAAG;MACJK,MAAM,EAAEiB;IACZ;EACJ,CAAC,CAAC;;EAEF;EACA,IAAI7B,IAAI,GAAG,CAAC,EAAE;IACV,IAAMc,QAAQ,GAAG,IAAIC,KAAK,CAACf,IAAI,CAAC,CAC3BgB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACwB,SAAS,CAAC,CAAC,CAAC;IACzC,MAAMR,WAAW,CAACH,IAAI,CAAC,CAACa,UAAU,CAACN,QAAQ,CAAC;EAChD;EAEA,OAAOJ,WAAW,CAACH,IAAI,CAAC;AAC5B;AAEA,OAAO,eAAewB,cAAcA,CAChCC,MAAM,GAAG,EAAE,EAC6B;EACxC,IAAM1B,EAAE,GAAG,MAAMT,gBAAgB,CAA+C;IAC5EU,IAAI,EAAET,iBAAiB,CAAC,EAAE,CAAC;IAC3BM,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCF,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF;EACA,IAAME,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxCsB,MAAM,EAAE;MACJrB,MAAM,EAAEnB,OAAO,CAACyC;IACpB;EACJ,CAAC,CAAC;;EAEF;EACA,IAAIF,MAAM,GAAG,CAAC,EAAE;IACZ,IAAMlB,QAAQ,GAAG,IAAIC,KAAK,CAACiB,MAAM,CAAC,CAC7BhB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACwB,SAAS,CAAC,CAAC,CAAC;IACzC,MAAMR,WAAW,CAACuB,MAAM,CAACb,UAAU,CAACN,QAAQ,CAAC;EACjD;EAEA,OAAOJ,WAAW,CAACuB,MAAM;AAC7B;AAEA,OAAO,eAAeE,gBAAgBA,CAClCnC,IAAI,GAAG,EAAE,EAQV;EACC,IAAMM,EAAE,GAAG,MAAMT,gBAAgB,CAG9B;IACCU,IAAI,EAAET,iBAAiB,CAAC,EAAE,CAAC;IAC3BM,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCF,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF;EACA,IAAME,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxCE,KAAK,EAAE;MACHD,MAAM,EAAEnB,OAAO,CAACoB;IACpB,CAAC;IACDuB,MAAM,EAAE;MACJxB,MAAM,EAAEnB,OAAO,CAACoB;IACpB;EACJ,CAAC,CAAC;;EAEF;EACA,IAAIb,IAAI,GAAG,CAAC,EAAE;IACV,IAAMc,QAAQ,GAAG,IAAIC,KAAK,CAACf,IAAI,CAAC,CAC3BgB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACwB,SAAS,CAAC,CAAC,CAAC;IACzC,MAAMR,WAAW,CAACG,KAAK,CAACO,UAAU,CAACN,QAAQ,CAAC;IAE5C,IAAMuB,SAAS,GAAG,IAAItB,KAAK,CAACf,IAAI,CAAC,CAC5BgB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACwB,SAAS,CAAC,CAAC,CAAC;IACzC,MAAMR,WAAW,CAAC0B,MAAM,CAAChB,UAAU,CAACiB,SAAS,CAAC;EAClD;EAEA,OAAO;IACH/B,EAAE;IACFgC,UAAU,EAAE5B,WAAW,CAACG,KAAK;IAC7B0B,WAAW,EAAE7B,WAAW,CAAC0B;EAC7B,CAAC;AACL;AAEA,OAAO,eAAeI,YAAYA,CAC9BR,MAAM,GAAG,CAAC,EACkD;EAC5D,IAAM1B,EAAE,GAAG,MAAMT,gBAAgB,CAAwE;IACrGU,IAAI,EAAET,iBAAiB,CAAC,EAAE,CAAC;IAC3BM,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCF,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF;EACA,IAAME,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxC8B,WAAW,EAAE;MACT7B,MAAM,EAAEnB,OAAO,CAACiD;IACpB;EACJ,CAAC,CAAC;;EAEF;EACA,IAAIV,MAAM,GAAG,CAAC,EAAE;IACZ,IAAMlB,QAAQ,GAAG,IAAIC,KAAK,CAACiB,MAAM,CAAC,CAC7BhB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACiD,eAAe,CAAC,CAAC,CAAC;IAC/C,MAAMjC,WAAW,CAAC+B,WAAW,CAACrB,UAAU,CAACN,QAAQ,CAAC;EACtD;EAEA,OAAOJ,WAAW,CAAC+B,WAAW;AAClC;AAEA,OAAO,eAAeG,gBAAgBA,CAClCZ,MAAM,GAAG,CAAC,EACsD;EAChE,IAAM1B,EAAE,GAAG,MAAMT,gBAAgB,CAA4E;IACzGU,IAAI,EAAET,iBAAiB,CAAC,EAAE,CAAC;IAC3BM,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCF,WAAW,EAAE;EACjB,CAAC,CAAC;EACF;EACA,IAAMO,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxC8B,WAAW,EAAE;MACT7B,MAAM,EAAEnB,OAAO,CAACoD;IACpB;EACJ,CAAC,CAAC;;EAEF;EACA,IAAIb,MAAM,GAAG,CAAC,EAAE;IACZ,IAAMlB,QAAQ,GAAG,IAAIC,KAAK,CAACiB,MAAM,CAAC,CAC7BhB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACoD,mBAAmB,CAAC,CAAC,CAAC;IACnD,MAAMpC,WAAW,CAAC+B,WAAW,CAACrB,UAAU,CAACN,QAAQ,CAAC;EACtD;EAEA,OAAOJ,WAAW,CAAC+B,WAAW;AAClC;AAEA,OAAO,eAAeM,mBAAmBA,CACrCxC,IAAY,EACZyB,MAAM,GAAG,CAAC,EACVgB,QAAQ,GAAGC,SAAS,EACpB7C,OAA4B,GAAGT,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC,EACf;EAChD,IAAI,CAACV,SAAS,CAAC,CAAC,CAACS,OAAO,CAAC8C,gBAAgB,EAAE;IACvC,MAAM,IAAIC,KAAK,CAAC,iFAAiF,CAAC;EACtG;EAEA,IAAM7C,EAAE,GAAG,MAAMT,gBAAgB,CAA8C;IAC3EU,IAAI;IACJH,OAAO;IACP4C,QAAQ;IACR9C,aAAa,EAAE,IAAI;IACnBC,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE,IAAI;IACrBC,cAAc,EAAE;EACpB,CAAC,CAAC;EACF;EACA,IAAMC,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxCE,KAAK,EAAE;MACHD,MAAM,EAAEnB,OAAO,CAACoB,KAAK;MACrBJ,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EACF;EACA,IAAIuB,MAAM,GAAG,CAAC,EAAE;IACZ,IAAMlB,QAAQ,GAAG,IAAIC,KAAK,CAACiB,MAAM,CAAC,CAC7BhB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACwB,SAAS,CAAC,CAAC,CAAC;IACzC,MAAMR,WAAW,CAACG,KAAK,CAACO,UAAU,CAACN,QAAQ,CAAC;EAChD;EAEA,OAAOJ,WAAW,CAACG,KAAK;AAC5B;AAEA,OAAO,eAAeuC,aAAaA,CAC/BpB,MAAM,GAAG,EAAE,EACXzB,IAAI,GAAGT,iBAAiB,CAAC,EAAE,CAAC,EACgC;EAE5D,IAAMQ,EAAE,GAAG,MAAMT,gBAAgB,CAAkE;IAC/FU,IAAI;IACJH,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCH,aAAa,EAAE,IAAI;IACnBC,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF;EACA,IAAME,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxCE,KAAK,EAAE;MACHD,MAAM,EAAEnB,OAAO,CAAC4D;IACpB;EACJ,CAAC,CAAC;;EAEF;EACA,IAAIrB,MAAM,GAAG,CAAC,EAAE;IACZ,IAAMlB,QAAQ,GAAG,IAAIC,KAAK,CAACiB,MAAM,CAAC,CAC7BhB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAAC4D,eAAe,CAAC,CAAC,CAAC;IAC/C,MAAM5C,WAAW,CAACG,KAAK,CAACO,UAAU,CAACN,QAAQ,CAAC;EAChD;EAEA,OAAOJ,WAAW,CAACG,KAAK;AAC5B;AAEA,OAAO,eAAe0C,wBAAwBA,CAC1CvB,MAAM,GAAG,CAAC,EACVwB,YAAY,GAAG1D,iBAAiB,CAAC,EAAE,CAAC,EACpCI,aAAa,GAAG,IAAI,EACpBE,OAAO,GAAGT,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC,EACyB;EAEnE,IAAMC,EAAE,GAAG,MAAMT,gBAAgB,CAA0E;IACvGU,IAAI,EAAEiD,YAAY;IAClBpD,OAAO;IACPF,aAAa;IACbC,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF;EACA,IAAME,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxC8C,MAAM,EAAE;MACJ7C,MAAM,EAAEnB,OAAO,CAACiE;IACpB;EACJ,CAAC,CAAC;;EAEF;EACA,IAAI1B,MAAM,GAAG,CAAC,EAAE;IACZ,IAAMlB,QAAQ,GAAG,IAAIC,KAAK,CAACiB,MAAM,CAAC,CAC7BhB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACiE,sBAAsB,CAAC,CAAC,CAAC;IACtD,MAAMjD,WAAW,CAAC+C,MAAM,CAACrC,UAAU,CAACN,QAAQ,CAAC;EACjD;EAEA,OAAOJ,WAAW,CAAC+C,MAAM;AAC7B;AAEA,OAAO,eAAeG,yBAAyBA,CAC3C5B,MAAM,GAAG,CAAC,EACV6B,sBAA2C,GAAG,CAAC,CAAC,EAChDtD,IAAI,GAAGT,iBAAiB,CAAC,EAAE,CAAC,EAC5BgE,WAAW,GAAG,KAAK,EACnBC,UAAgC,EAC8B;EAE9D,IAAMvC,mBAAwB,GAAGwC,MAAM,CAACC,MAAM,CAC1C;IACI,CAAC,EAAGC,GAAQ,IAAKA,GAAG;IACpB,CAAC,EAAGA,GAAQ,IAAKA,GAAG;IACpB,CAAC,EAAGA,GAAQ,IAAKA;EACrB,CAAC,EACDL,sBACJ,CAAC;EAGD,IAAMM,OAAO,GAAG,OAAO;EACvB,IAAM7D,EAAE,GAAG,MAAMT,gBAAgB,CAAqE;IAClGU,IAAI;IACJH,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCF,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF,IAAM4D,IAAI,GAAG,MAAM9D,EAAE,CAACK,cAAc,CAAC;IACjC,CAACwD,OAAO,GAAG;MACPvD,MAAM,EAAEmD,UAAU,KAAKd,SAAS,GAAG;QAAE,GAAGxD,OAAO,CAAC4E,WAAW;QAAE1C,WAAW,EAAE,CAAC;MAAE,CAAC,GAAGlC,OAAO,CAAC4E,WAAW;MACpGP,WAAW,EAAE;IACjB;EACJ,CAAC,CAAC;EAEF,MAAMQ,OAAO,CAACC,GAAG,CACb,IAAIxD,KAAK,CAACiB,MAAM,CAAC,CACZhB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMmD,IAAI,CAACD,OAAO,CAAC,CAACK,MAAM,CAAC9E,aAAa,CAAC+E,cAAc,CAAC,CAAC,CAAC,CAACC,IAAI,CAACR,GAAG,IAAI;IACxE,IAAIH,UAAU,KAAKd,SAAS,EAAE;MAC1B,OAAOiB,GAAG,CAACS,aAAa,CAACZ,UAAU,CAAC;IACxC;EACJ,CAAC,CAAC,CACV,CAAC;EACD,MAAMzD,EAAE,CAACsE,OAAO,CAAC,CAAC;EAElB,IAAMC,GAAG,GAAG,MAAMhF,gBAAgB,CAAoE;IAClGU,IAAI;IACJH,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCF,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF,IAAMsE,KAAK,GAAG,MAAMD,GAAG,CAAClE,cAAc,CAAC;IACnC,CAACwD,OAAO,GAAG;MACPvD,MAAM,EAAEmD,UAAU,KAAKd,SAAS,GAAG;QAAE,GAAGxD,OAAO,CAACsF,aAAa;QAAEpD,WAAW,EAAE,CAAC;MAAE,CAAC,GAAGlC,OAAO,CAACsF,aAAa;MACxGjB,WAAW;MACXtC;IACJ;EACJ,CAAC,CAAC;EAEF,OAAOsD,KAAK,CAACX,OAAO,CAAC;AACzB;AAEA,OAAO,eAAea,aAAaA,CAC/BzE,IAAI,GAAGT,iBAAiB,CAAC,EAAE,CAAC,EAC6B;EACzD,IAAMQ,EAAE,GAAG,MAAMT,gBAAgB,CAA+D;IAC5FU,IAAI;IACJH,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCH,aAAa,EAAE,IAAI;IACnBC,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF;EACA,IAAME,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxCE,KAAK,EAAE;MACHD,MAAM,EAAEnB,OAAO,CAACwF;IACpB;EACJ,CAAC,CAAC;EAEF,IAAMC,IAAI,GAAGxF,aAAa,CAACyF,YAAY,CAAC,CAAC;EACzC,IAAMC,IAAI,GAAG1F,aAAa,CAACyF,YAAY,CAACD,IAAI,CAAC3E,IAAI,CAAC;EAClD2E,IAAI,CAACG,UAAU,GAAGD,IAAI,CAAC7E,IAAI,CAAC,CAAC;;EAE7B,MAAMG,WAAW,CAACG,KAAK,CAAC2D,MAAM,CAACU,IAAI,CAAC;EACpC,MAAMxE,WAAW,CAACG,KAAK,CAAC2D,MAAM,CAACY,IAAI,CAAC;EAEpC,OAAO1E,WAAW,CAACG,KAAK;AAC5B;AAEA,OAAO,eAAeyE,mBAAmBA,CACrC/E,IAAI,GAAGT,iBAAiB,CAAC,EAAE,CAAC,EACmC;EAE/D,IAAMQ,EAAE,GAAG,MAAMT,gBAAgB,CAAqE;IAClGU,IAAI;IACJH,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCH,aAAa,EAAE,IAAI;IACnBC,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF;EACA,IAAME,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxCE,KAAK,EAAE;MACHD,MAAM,EAAEnB,OAAO,CAAC8F;IACpB;EACJ,CAAC,CAAC;EAEF,IAAML,IAAI,GAAGxF,aAAa,CAAC8F,kBAAkB,CAAC,CAAC;EAC/C,IAAMJ,IAAI,GAAG1F,aAAa,CAAC8F,kBAAkB,CAACN,IAAI,CAAC3E,IAAI,CAAC;EACxD2E,IAAI,CAACO,GAAG,CAACJ,UAAU,GAAGD,IAAI,CAAC7E,IAAI,CAAC,CAAC;;EAEjC,MAAMG,WAAW,CAACG,KAAK,CAAC2D,MAAM,CAACU,IAAI,CAAC;EACpC,MAAMxE,WAAW,CAACG,KAAK,CAAC2D,MAAM,CAACY,IAAI,CAAC;EAEpC,OAAO1E,WAAW,CAACG,KAAK;AAC5B;AAEA,OAAO,eAAe6E,mBAAmBA,CACrC1D,MAAM,GAAG,EAAE,EAC4D;EACvE,IAAM1B,EAAE,GAAG,MAAMT,gBAAgB,CAA8E;IAC3GU,IAAI,EAAET,iBAAiB,CAAC,EAAE,CAAC;IAC3BM,OAAO,EAAET,SAAS,CAAC,CAAC,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IACzCF,WAAW,EAAE,IAAI;IACjBK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF;EACA,IAAME,WAAW,GAAG,MAAMJ,EAAE,CAACK,cAAc,CAAC;IACxCsB,MAAM,EAAE;MACJrB,MAAM,EAAEnB,OAAO,CAACkG;IACpB;EACJ,CAAC,CAAC;;EAEF;EACA,IAAI3D,MAAM,GAAG,CAAC,EAAE;IACZ,IAAMlB,QAAQ,GAAG,IAAIC,KAAK,CAACiB,MAAM,CAAC,CAC7BhB,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,MAAMvB,aAAa,CAACkG,kCAAkC,CAAC,CAAC,CAAC;IAClE,MAAMlF,WAAW,CAACuB,MAAM,CAACb,UAAU,CAACN,QAAQ,CAAC;EACjD;EAEA,OAAOJ,WAAW,CAACuB,MAAM;AAC7B","ignoreList":[]}