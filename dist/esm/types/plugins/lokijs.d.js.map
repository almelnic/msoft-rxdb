{"version":3,"file":"lokijs.d.js","names":[],"sources":["../../../../src/types/plugins/lokijs.d.ts"],"sourcesContent":["import type { LeaderElector } from 'broadcast-channel';\r\nimport type { AddReturn } from 'unload';\r\nimport type { LokiSaveQueue } from '../../plugins/storage-lokijs/loki-save-queue.ts';\r\n\r\nexport type LokiDatabaseSettings = any;\r\n\r\nexport type LokiCollectionSettings = Partial<any>;\r\n\r\nexport type LokiSettings = {\r\n    database?: LokiDatabaseSettings;\r\n    collection?: LokiCollectionSettings;\r\n};\r\n\r\nexport type LokiStorageInternals = {\r\n    leaderElector?: LeaderElector;\r\n    localState?: Promise<LokiLocalDatabaseState>;\r\n};\r\n\r\nexport type LokiRemoteRequestBroadcastMessage = {\r\n    response: false;\r\n    type: string;\r\n    databaseName: string;\r\n    collectionName: string;\r\n    operation: string;\r\n    params: any[];\r\n    requestId: string;\r\n};\r\n\r\nexport type LokiRemoteResponseBroadcastMessage = {\r\n    response: true;\r\n    type: string;\r\n    databaseName: string;\r\n    collectionName: string;\r\n    requestId: string;\r\n    result: any | any[];\r\n    // if true, the result property will contain an error state\r\n    isError: boolean;\r\n};\r\n\r\nexport type LokiDatabaseState = {\r\n    database: any;\r\n    databaseSettings: LokiDatabaseSettings;\r\n    saveQueue: LokiSaveQueue;\r\n\r\n    // all known collections of the database\r\n    collections: {\r\n        [collectionName: string]: any;\r\n    };\r\n\r\n    /**\r\n     * Registered unload handlers\r\n     * so we can remove them on close.\r\n     */\r\n    unloads: AddReturn[];\r\n};\r\n\r\nexport type LokiLocalDatabaseState = {\r\n    databaseState: LokiDatabaseState;\r\n    collection: any;\r\n};\r\n"],"mappings":"","ignoreList":[]}