{"version":3,"file":"utils-string.js","names":["COUCH_NAME_CHARS","randomCouchString","length","text","i","charAt","Math","floor","random","RANDOM_STRING","exports","ucfirst","str","f","toUpperCase","substr","trimDots","slice","lastCharOfString","isFolderPath","name","includes","arrayBufferToString","arrayBuffer","chunkSize","len","byteLength","chunk","Uint8Array","min","String","fromCharCode","apply","stringToArrayBuffer","buf","ArrayBuffer","bufView","strLen","charCodeAt","normalizeString","trim","replace"],"sources":["../../../../src/plugins/utils/utils-string.ts"],"sourcesContent":["const COUCH_NAME_CHARS = 'abcdefghijklmnopqrstuvwxyz';\r\n/**\r\n * get a random string which can be used with couchdb\r\n * @link http://stackoverflow.com/a/1349426/3443137\r\n */\r\nexport function randomCouchString(length: number = 10): string {\r\n    let text = '';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        text += COUCH_NAME_CHARS.charAt(Math.floor(Math.random() * COUCH_NAME_CHARS.length));\r\n    }\r\n\r\n    return text;\r\n}\r\n\r\n\r\n/**\r\n * A random string that is never inside of any storage\r\n */\r\nexport const RANDOM_STRING = 'Fz7SZXPmYJujkzjY1rpXWvlWBqoGAfAX';\r\n\r\n/**\r\n * uppercase first char\r\n */\r\nexport function ucfirst(str: string): string {\r\n    str += '';\r\n    const f = str.charAt(0)\r\n        .toUpperCase();\r\n    return f + str.substr(1);\r\n}\r\n\r\n/**\r\n * removes trailing and ending dots from the string\r\n */\r\nexport function trimDots(str: string): string {\r\n    // start\r\n    while (str.charAt(0) === '.') {\r\n        str = str.substr(1);\r\n    }\r\n\r\n    // end\r\n    while (str.slice(-1) === '.') {\r\n        str = str.slice(0, -1);\r\n    }\r\n\r\n    return str;\r\n}\r\n\r\n/**\r\n * @link https://stackoverflow.com/a/44950500/3443137\r\n */\r\nexport function lastCharOfString(str: string): string {\r\n    return str.charAt(str.length - 1);\r\n}\r\n\r\n/**\r\n * returns true if the given name is likely a folder path\r\n */\r\nexport function isFolderPath(name: string) {\r\n    // do not check, if foldername is given\r\n    if (\r\n        name.includes('/') || // unix\r\n        name.includes('\\\\') // windows\r\n    ) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @link https://gist.github.com/andreburgaud/6f73fd2d690b629346b8\r\n * @link https://stackoverflow.com/a/76240378/3443137\r\n */\r\nexport function arrayBufferToString(arrayBuffer: ArrayBuffer): string {\r\n    const chunkSize = 8192;\r\n    let str = '';\r\n    var len = arrayBuffer.byteLength;\r\n    for (let i = 0; i < len; i += chunkSize) {\r\n        const chunk = new Uint8Array(\r\n            arrayBuffer,\r\n            i,\r\n            Math.min(chunkSize, len - i)\r\n        );\r\n        str += String.fromCharCode.apply(null, chunk as any);\r\n    }\r\n    return str;\r\n}\r\n\r\nexport function stringToArrayBuffer(str: string): ArrayBuffer {\r\n    const buf = new ArrayBuffer(str.length);\r\n    const bufView = new Uint8Array(buf);\r\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n        bufView[i] = str.charCodeAt(i);\r\n    }\r\n    return buf;\r\n}\r\n\r\n\r\nexport function normalizeString(str: string) : string {\r\n    return str.trim().replace(/[\\n\\s]+/g, '');\r\n}\r\n"],"mappings":"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","ignoreList":[]}