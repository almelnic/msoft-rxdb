{"version":3,"file":"rx-storage-instance-foundationdb.js","names":["_rxjs","require","_rxSchemaHelper","_rxStorageHelper","_foundationdbHelpers","_customIndex","_index","_foundationdbQuery","_queryPlanner","_index2","RxStorageInstanceFoundationDB","exports","storage","databaseName","collectionName","schema","internals","options","settings","changes$","Subject","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","dbs","dbsPromise","ret","error","writeBatches","batchArray","FOUNDATION_DB_WRITE_BATCH_SIZE","Promise","all","map","writeBatch","categorized","root","doTransaction","tx","ids","row","document","mainTx","at","main","subspace","attachmentTx","attachments","docsInDB","Map","id","doc","get","set","categorizeBulkWriteRows","appendToArray","errors","bulkInsertDocs","forEach","writeRow","docId","Object","values","indexes","indexMeta","indexString","getIndexableString","indexTx","db","bulkUpdateDocs","oldIndexString","ensureNotFalsy","previous","newIndexString","delete","attachmentsAdd","attachment","attachmentMapKey","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","eventBulk","events","length","lastState","newestRow","checkpoint","lwt","_meta","endTime","now","next","findDocumentsById","withDeleted","docInDb","_deleted","push","query","preparedQuery","queryFoundationDB","count","result","documents","mode","getAttachmentData","_digest","data","changeStream","asObservable","remove","clearRange","INDEX_MAX","PROMISE_RESOLVE_VOID","close","cleanup","minimumDeletedTime","keySelector","StreamingMode","maxDeletionTime","index","CLEANUP_INDEX","indexName","getFoundationDBIndexName","lowerBoundString","getStartIndexStringFromLowerBound","upperBoundString","getStartIndexStringFromUpperBound","noMoreUndeleted","batchSize","range","getRangeAll","firstGreaterThan","limit","streamingMode","Exact","pop","docIds","docsData","indexMetaInner","subIndexDB","docData","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","closed","complete","createFoundationDBStorageInstance","params","open","directory","encoders","connection","clusterFile","dir","createOrOpen","version","withKeyEncoding","string","withValueEncoding","json","indexDBs","useIndexes","slice","useIndexesFinal","indexAr","toArray","indexDB","getIndexableStringMonad","instance","resolve"],"sources":["../../../../src/plugins/storage-foundationdb/rx-storage-instance-foundationdb.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\r\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\r\nimport type {\r\n    BulkWriteRow,\r\n    CategorizeBulkWriteRowsOutput,\r\n    EventBulk,\r\n    PreparedQuery,\r\n    RxAttachmentWriteData,\r\n    RxConflictResultionTask,\r\n    RxConflictResultionTaskSolution,\r\n    RxDocumentData,\r\n    RxJsonSchema,\r\n    RxStorageBulkWriteResponse,\r\n    RxStorageChangeEvent,\r\n    RxStorageCountResult,\r\n    RxStorageDefaultCheckpoint,\r\n    RxStorageInstance,\r\n    RxStorageInstanceCreationParams,\r\n    RxStorageQueryResult,\r\n    StringKeys\r\n} from '../../types/index.d.ts';\r\nimport type {\r\n    FoundationDBDatabase,\r\n    FoundationDBIndexMeta,\r\n    FoundationDBStorageInternals,\r\n    RxStorageFoundationDB,\r\n    RxStorageFoundationDBInstanceCreationOptions,\r\n    RxStorageFoundationDBSettings\r\n} from './foundationdb-types.ts';\r\n// import {\r\n//     open as foundationDBOpen,\r\n//     directory as foundationDBDirectory,\r\n//     encoders as foundationDBEncoders,\r\n//     keySelector as foundationDBKeySelector,\r\n//     StreamingMode as foundationDBStreamingMode\r\n// } from 'foundationdb';\r\nimport {\r\n    categorizeBulkWriteRows\r\n} from '../../rx-storage-helper.ts';\r\nimport {\r\n\r\n    CLEANUP_INDEX,\r\n    FOUNDATION_DB_WRITE_BATCH_SIZE,\r\n    getFoundationDBIndexName\r\n} from './foundationdb-helpers.ts';\r\nimport {\r\n    getIndexableStringMonad,\r\n    getStartIndexStringFromLowerBound,\r\n    getStartIndexStringFromUpperBound\r\n} from '../../custom-index.ts';\r\nimport {\r\n    appendToArray,\r\n    batchArray,\r\n    ensureNotFalsy,\r\n    lastOfArray,\r\n    now,\r\n    PROMISE_RESOLVE_VOID,\r\n    toArray\r\n} from '../../plugins/utils/index.ts';\r\nimport { queryFoundationDB } from './foundationdb-query.ts';\r\nimport { INDEX_MAX } from '../../query-planner.ts';\r\nimport { attachmentMapKey } from '../storage-memory/index.ts';\r\n\r\nexport class RxStorageInstanceFoundationDB<RxDocType> implements RxStorageInstance<\r\n    RxDocType,\r\n    FoundationDBStorageInternals<RxDocType>,\r\n    RxStorageFoundationDBInstanceCreationOptions,\r\n    RxStorageDefaultCheckpoint\r\n> {\r\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\r\n\r\n    public closed?: Promise<void>;\r\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\r\n\r\n    constructor(\r\n        public readonly storage: RxStorageFoundationDB,\r\n        public readonly databaseName: string,\r\n        public readonly collectionName: string,\r\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\r\n        public readonly internals: FoundationDBStorageInternals<RxDocType>,\r\n        public readonly options: Readonly<RxStorageFoundationDBInstanceCreationOptions>,\r\n        public readonly settings: RxStorageFoundationDBSettings\r\n    ) {\r\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n    }\r\n\r\n    async bulkWrite(\r\n        documentWrites: BulkWriteRow<RxDocType>[],\r\n        context: string\r\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\r\n        const dbs = await this.internals.dbsPromise;\r\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\r\n            error: []\r\n        };\r\n\r\n        /**\r\n         * Doing too many write in a single transaction\r\n         * will throw with a 'Transaction exceeds byte limit'\r\n         * so we have to batch up the writes.\r\n         */\r\n        const writeBatches = batchArray(documentWrites, FOUNDATION_DB_WRITE_BATCH_SIZE);\r\n        await Promise.all(\r\n            writeBatches.map(async (writeBatch) => {\r\n                let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\r\n                await dbs.root.doTransaction(async (tx: any) => {\r\n                    const ids = writeBatch.map(row => (row.document as any)[this.primaryPath]);\r\n                    const mainTx = tx.at(dbs.main.subspace);\r\n                    const attachmentTx = tx.at(dbs.attachments.subspace);\r\n                    const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\r\n                    /**\r\n                     * TODO this might be faster if fdb\r\n                     * any time adds a bulk-fetch-by-key method.\r\n                     */\r\n                    await Promise.all(\r\n                        ids.map(async (id) => {\r\n                            const doc = await mainTx.get(id);\r\n                            docsInDB.set(id, doc);\r\n                        })\r\n                    );\r\n                    categorized = categorizeBulkWriteRows<RxDocType>(\r\n                        this,\r\n                        this.primaryPath as any,\r\n                        docsInDB,\r\n                        writeBatch,\r\n                        context\r\n                    );\r\n                    appendToArray(ret.error, categorized.errors);\r\n\r\n                    // INSERTS\r\n                    categorized.bulkInsertDocs.forEach(writeRow => {\r\n                        const docId: string = writeRow.document[this.primaryPath] as any;\r\n\r\n                        // insert document data\r\n                        mainTx.set(docId, writeRow.document);\r\n\r\n                        // insert secondary indexes\r\n                        Object.values(dbs.indexes).forEach(indexMeta => {\r\n                            const indexString = indexMeta.getIndexableString(writeRow.document as any);\r\n                            const indexTx = tx.at(indexMeta.db.subspace);\r\n                            indexTx.set(indexString, docId);\r\n                        });\r\n                    });\r\n                    // UPDATES\r\n                    categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\r\n                        const docId: string = writeRow.document[this.primaryPath] as any;\r\n\r\n                        // overwrite document data\r\n                        mainTx.set(docId, writeRow.document);\r\n\r\n                        // update secondary indexes\r\n                        Object.values(dbs.indexes).forEach(indexMeta => {\r\n                            const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\r\n                            const newIndexString = indexMeta.getIndexableString(writeRow.document as any);\r\n                            if (oldIndexString !== newIndexString) {\r\n                                const indexTx = tx.at(indexMeta.db.subspace);\r\n                                indexTx.delete(oldIndexString);\r\n                                indexTx.set(newIndexString, docId);\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    // attachments\r\n                    categorized.attachmentsAdd.forEach(attachment => {\r\n                        attachmentTx.set(\r\n                            attachmentMapKey(attachment.documentId, attachment.attachmentId),\r\n                            attachment.attachmentData\r\n                        );\r\n                    });\r\n                    categorized.attachmentsUpdate.forEach(attachment => {\r\n                        attachmentTx.set(\r\n                            attachmentMapKey(attachment.documentId, attachment.attachmentId),\r\n                            attachment.attachmentData\r\n                        );\r\n                    });\r\n                    categorized.attachmentsRemove.forEach(attachment => {\r\n                        attachmentTx.delete(\r\n                            attachmentMapKey(attachment.documentId, attachment.attachmentId)\r\n                        );\r\n                    });\r\n                });\r\n                categorized = ensureNotFalsy(categorized);\r\n                /**\r\n                 * The events must be emitted AFTER the transaction\r\n                 * has finished.\r\n                 * Otherwise an observable changestream might cause a read\r\n                 * to a document that does not already exist outside of the transaction.\r\n                 */\r\n                if (categorized.eventBulk.events.length > 0) {\r\n                    const lastState = ensureNotFalsy(categorized.newestRow).document;\r\n                    categorized.eventBulk.checkpoint = {\r\n                        id: lastState[this.primaryPath],\r\n                        lwt: lastState._meta.lwt\r\n                    };\r\n                    categorized.eventBulk.endTime = now();\r\n                    this.changes$.next(categorized.eventBulk);\r\n                }\r\n            })\r\n        );\r\n\r\n\r\n        return ret;\r\n    }\r\n\r\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\r\n        const dbs = await this.internals.dbsPromise;\r\n        return dbs.main.doTransaction(async (tx: any) => {\r\n            const ret: RxDocumentData<RxDocType>[] = [];\r\n            await Promise.all(\r\n                ids.map(async (docId) => {\r\n                    const docInDb = await tx.get(docId);\r\n                    if (\r\n                        docInDb &&\r\n                        (\r\n                            !docInDb._deleted ||\r\n                            withDeleted\r\n                        )\r\n                    ) {\r\n                        ret.push(docInDb);\r\n                    }\r\n                })\r\n            );\r\n            return ret;\r\n        });\r\n    }\r\n    query(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\r\n        return queryFoundationDB(this, preparedQuery);\r\n    }\r\n    async count(\r\n        preparedQuery: PreparedQuery<RxDocType>\r\n    ): Promise<RxStorageCountResult> {\r\n        /**\r\n         * At this point in time (end 2022), FoundationDB does not support\r\n         * range counts. So we have to run a normal query and use the result set length.\r\n         * @link https://github.com/apple/foundationdb/issues/5981\r\n         */\r\n        const result = await this.query(preparedQuery);\r\n        return {\r\n            count: result.documents.length,\r\n            mode: 'fast'\r\n        };\r\n    }\r\n\r\n    async getAttachmentData(documentId: string, attachmentId: string, _digest: string): Promise<string> {\r\n        const dbs = await this.internals.dbsPromise;\r\n        const attachment = await dbs.attachments.get(attachmentMapKey(documentId, attachmentId));\r\n        return attachment.data;\r\n    }\r\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocType>, RxStorageDefaultCheckpoint>> {\r\n        return this.changes$.asObservable();\r\n    }\r\n\r\n    async remove(): Promise<void> {\r\n        const dbs = await this.internals.dbsPromise;\r\n        await dbs.root.doTransaction((tx: any) => {\r\n            tx.clearRange('', INDEX_MAX);\r\n            return PROMISE_RESOLVE_VOID;\r\n        });\r\n        return this.close();\r\n    }\r\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\r\n        const {\r\n            keySelector,\r\n            StreamingMode\r\n        } = require('foundationdb');\r\n        const maxDeletionTime = now() - minimumDeletedTime;\r\n        const dbs = await this.internals.dbsPromise;\r\n        const index = CLEANUP_INDEX;\r\n        const indexName = getFoundationDBIndexName(index);\r\n        const indexMeta = dbs.indexes[indexName];\r\n        const lowerBoundString = getStartIndexStringFromLowerBound(\r\n            this.schema,\r\n            index,\r\n            [\r\n                true,\r\n                /**\r\n                 * Do not use 0 here,\r\n                 * because 1 is the minimum value for _meta.lwt\r\n                 */\r\n                1\r\n            ]\r\n        );\r\n        const upperBoundString = getStartIndexStringFromUpperBound(\r\n            this.schema,\r\n            index,\r\n            [\r\n                true,\r\n                maxDeletionTime\r\n            ]\r\n        );\r\n        let noMoreUndeleted: boolean = true;\r\n        await dbs.root.doTransaction(async (tx: any) => {\r\n            const batchSize = ensureNotFalsy(this.settings.batchSize);\r\n            const indexTx = tx.at(indexMeta.db.subspace);\r\n            const mainTx = tx.at(dbs.main.subspace);\r\n            const range = await indexTx.getRangeAll(\r\n                keySelector.firstGreaterThan(lowerBoundString),\r\n                upperBoundString,\r\n                {\r\n                    limit: batchSize + 1, // get one more extra to detect what to return from cleanup()\r\n                    streamingMode: StreamingMode.Exact\r\n                }\r\n            );\r\n            if (range.length > batchSize) {\r\n                noMoreUndeleted = false;\r\n                range.pop();\r\n            }\r\n            const docIds = range.map((row: string[]) => row[1]);\r\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\r\n\r\n            Object\r\n                .values(dbs.indexes)\r\n                .forEach(indexMetaInner => {\r\n                    const subIndexDB = tx.at(indexMetaInner.db.subspace);\r\n                    docsData.forEach(docData => {\r\n                        const indexString = indexMetaInner.getIndexableString(docData);\r\n                        subIndexDB.delete(indexString);\r\n                    });\r\n                });\r\n            docIds.forEach((id: string) => mainTx.delete(id));\r\n        });\r\n\r\n        return noMoreUndeleted;\r\n    }\r\n\r\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\r\n        return new Subject<any>().asObservable();\r\n    }\r\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\r\n        return PROMISE_RESOLVE_VOID;\r\n    }\r\n\r\n    async close() {\r\n        if (this.closed) {\r\n            return this.closed;\r\n        }\r\n        this.closed = (async () => {\r\n            this.changes$.complete();\r\n            const dbs = await this.internals.dbsPromise;\r\n            await dbs.root.close();\r\n\r\n            // TODO shouldn't we close the index databases?\r\n            // Object.values(dbs.indexes).forEach(db => db.close());\r\n        })();\r\n        return this.closed;\r\n    }\r\n}\r\n\r\n\r\nexport function createFoundationDBStorageInstance<RxDocType>(\r\n    storage: RxStorageFoundationDB,\r\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>,\r\n    settings: RxStorageFoundationDBSettings\r\n): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\r\n\r\n    const {\r\n        open,\r\n        directory,\r\n        encoders\r\n    } = require('foundationdb');\r\n\r\n    const connection = open(settings.clusterFile);\r\n    const dbsPromise = (async () => {\r\n        const dir = await directory.createOrOpen(connection, 'rxdb');\r\n\r\n        const root = connection\r\n            .at(dir)\r\n            .at(params.databaseName + '.')\r\n            .at(params.collectionName + '.')\r\n            .at(params.schema.version + '.');\r\n        const main: FoundationDBDatabase<RxDocType> = root\r\n            .at('main.')\r\n            .withKeyEncoding(encoders.string) // automatically encode & decode keys using tuples\r\n            .withValueEncoding(encoders.json) as any; // and values using JSON\r\n\r\n\r\n        const events: FoundationDBDatabase<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = root\r\n            .at('events.')\r\n            .withKeyEncoding(encoders.string)\r\n            .withValueEncoding(encoders.json) as any;\r\n\r\n        const attachments: FoundationDBDatabase<RxAttachmentWriteData> = root\r\n            .at('attachments.')\r\n            .withKeyEncoding(encoders.string)\r\n            .withValueEncoding(encoders.json) as any;\r\n\r\n\r\n        const indexDBs: { [indexName: string]: FoundationDBIndexMeta<RxDocType>; } = {};\r\n        const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\r\n        useIndexes.push([primaryPath]);\r\n        const useIndexesFinal = useIndexes.map(index => {\r\n            const indexAr = toArray(index);\r\n            return indexAr;\r\n        });\r\n        // used for `getChangedDocumentsSince()`\r\n        useIndexesFinal.push([\r\n            '_meta.lwt',\r\n            primaryPath\r\n        ]);\r\n        useIndexesFinal.push(CLEANUP_INDEX);\r\n        useIndexesFinal.forEach(indexAr => {\r\n            const indexName = getFoundationDBIndexName(indexAr);\r\n            const indexDB = root.at(indexName + '.')\r\n                .withKeyEncoding(encoders.string)\r\n                .withValueEncoding(encoders.string);\r\n            indexDBs[indexName] = {\r\n                indexName,\r\n                db: indexDB,\r\n                getIndexableString: getIndexableStringMonad(params.schema, indexAr),\r\n                index: indexAr\r\n            };\r\n        });\r\n\r\n        return {\r\n            root,\r\n            main,\r\n            events,\r\n            attachments,\r\n            indexes: indexDBs\r\n        };\r\n    })();\r\n\r\n\r\n    const internals: FoundationDBStorageInternals<RxDocType> = {\r\n        connection,\r\n        dbsPromise: dbsPromise\r\n    };\r\n\r\n    const instance = new RxStorageInstanceFoundationDB(\r\n        storage,\r\n        params.databaseName,\r\n        params.collectionName,\r\n        params.schema,\r\n        internals,\r\n        params.options,\r\n        settings\r\n    );\r\n    return Promise.resolve(instance);\r\n}\r\n"],"mappings":"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","ignoreList":[]}