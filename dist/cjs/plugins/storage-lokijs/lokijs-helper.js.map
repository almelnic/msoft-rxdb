{"version":3,"file":"lokijs-helper.js","names":["_rxStorageInstanceLoki","require","_lokijs","_interopRequireDefault","_unload","_index","_lokiSaveQueue","_rxError","_rxStorageMultiinstance","_index2","_overwritable","CHANGES_COLLECTION_SUFFIX","exports","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","RX_STORAGE_NAME_LOKIJS","stripLokiKey","docData","$loki","cloned","flatClone","$lastWriteAt","_meta","lwt","OPEN_LOKIJS_STORAGE_INSTANCES","Set","LOKIJS_COLLECTION_DEFAULT_OPTIONS","disableChangesApi","disableMeta","disableDeltaChangesApi","disableFreeze","cloneMethod","clone","transactional","autoupdate","LOKI_DATABASE_STATE_BY_NAME","Map","getLokiDatabase","databaseName","databaseSettings","getFromMapOrCreate","hasPersistence","adapter","databaseState","persistenceMethod","useSettings","Object","assign","autoload","verbose","autosave","throttledSaves","database","Loki","lokiSaveQueue","LokiSaveQueue","loadDatabasePromise","Promise","res","rej","loadDatabase","recursiveWait","err","autoloadCallback","saveQueue","then","unloads","push","unloadAdd","run","state","collections","closeLokiCollections","get","forEach","collection","collectionName","name","keys","length","delete","u","remove","close","getLokiSortComparator","_schema","query","sort","newRxError","sortOptions","fun","a","b","compareResult","find","sortPart","fieldName","direction","values","directionMultiplier","valueA","getProperty","valueB","args","getLokiLeaderElector","databaseInstanceToken","broadcastChannelRefObject","broadcastChannel","getBroadcastChannelReference","elector","getLeaderElectorByBroadcastChannel","requestRemoteInstance","instance","operation","params","isRxStorageInstanceLoki","messageType","leaderElector","ensureNotFalsy","internals","waitUntilHasLeader","whenDeathListener","leaderDeadPromise","msg","context","action","retry","addEventListener","requestId","randomCouchString","responseListener","responsePromise","_rej","type","response","isError","error","result","postMessage","timeout","race","firstResolved","clearTimeout","removeEventListener","handleRemoteRequest","console","dir","awaitLeadership","catch","promiseWait","has","hasLeader","isClosed","isDead","applyOnce","mustUseLocalState","closed","Error","JSON","stringify","instanceClosed","localState","isLeader","createLokiLocalState","options","schema","multiInstance","devMode","overwritable","isDevMode","transformRegexToRegExp","selector","ret","key","value","RegExp","opts","Array","isArray","map","item"],"sources":["../../../../src/plugins/storage-lokijs/lokijs-helper.ts"],"sourcesContent":["import {\r\n    createLokiLocalState,\r\n    RxStorageInstanceLoki\r\n} from './rx-storage-instance-loki.ts';\r\nimport Loki from 'lokijs';\r\nimport type {\r\n    DeterministicSortComparator,\r\n    FilledMangoQuery,\r\n    LokiDatabaseSettings,\r\n    LokiDatabaseState,\r\n    LokiLocalDatabaseState,\r\n    LokiRemoteResponseBroadcastMessage,\r\n    MangoQuerySortDirection,\r\n    MangoQuerySortPart,\r\n    RxDocumentData,\r\n    RxJsonSchema\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    add as unloadAdd,\r\n    AddReturn\r\n} from 'unload';\r\nimport {\r\n    ensureNotFalsy,\r\n    flatClone,\r\n    getFromMapOrCreate,\r\n    getProperty,\r\n    promiseWait,\r\n    randomCouchString\r\n} from '../utils/index.ts';\r\nimport { LokiSaveQueue } from './loki-save-queue.ts';\r\nimport { newRxError } from '../../rx-error.ts';\r\nimport {\r\n    LeaderElector,\r\n    OnMessageHandler\r\n} from 'broadcast-channel';\r\nimport { getBroadcastChannelReference } from '../../rx-storage-multiinstance.ts';\r\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election/index.ts';\r\nimport { overwritable } from '../../overwritable.ts';\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\r\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\r\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\r\nexport const RX_STORAGE_NAME_LOKIJS = 'lokijs';\r\n\r\n/**\r\n * Loki attaches a $loki property to all data\r\n * which must be removed before returning the data back to RxDB.\r\n */\r\nexport function stripLokiKey<T>(docData: RxDocumentData<T> & { $loki?: number; }): T {\r\n    if (!docData.$loki) {\r\n        return docData;\r\n    }\r\n    const cloned = flatClone(docData);\r\n\r\n    /**\r\n     * In RxDB version 12.0.0,\r\n     * we introduced the _meta field that already contains the last write time.\r\n     * To be backwards compatible, we have to move the $lastWriteAt to the _meta field.\r\n     * TODO remove this in the next major version.\r\n     */\r\n    if ((cloned as any).$lastWriteAt) {\r\n        cloned._meta = {\r\n            lwt: (cloned as any).$lastWriteAt\r\n        };\r\n        delete (cloned as any).$lastWriteAt;\r\n    }\r\n\r\n    delete cloned.$loki;\r\n    return cloned;\r\n}\r\n\r\n/**\r\n * Used to check in tests if all instances have been cleaned up.\r\n */\r\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageInstanceLoki<any>> = new Set();\r\n\r\n\r\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<any> = {\r\n    disableChangesApi: true,\r\n    disableMeta: true,\r\n    disableDeltaChangesApi: true,\r\n    disableFreeze: true,\r\n    // TODO use 'immutable' like WatermelonDB does it\r\n    cloneMethod: 'shallow-assign',\r\n    clone: false,\r\n    transactional: false,\r\n    autoupdate: false\r\n};\r\n\r\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\r\nexport function getLokiDatabase(\r\n    databaseName: string,\r\n    databaseSettings: LokiDatabaseSettings\r\n): Promise<LokiDatabaseState> {\r\n\r\n\r\n    return getFromMapOrCreate(\r\n        LOKI_DATABASE_STATE_BY_NAME,\r\n        databaseName,\r\n        () => {\r\n            /**\r\n             * We assume that as soon as an adapter is passed,\r\n             * the database has to be persistent.\r\n             */\r\n            const hasPersistence: boolean = !!databaseSettings.adapter;\r\n            const databaseState = (async () => {\r\n                let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\r\n                if (databaseSettings.persistenceMethod) {\r\n                    persistenceMethod = databaseSettings.persistenceMethod;\r\n                }\r\n                const useSettings = Object.assign(\r\n                    // defaults\r\n                    {\r\n                        autoload: hasPersistence,\r\n                        persistenceMethod,\r\n                        verbose: true\r\n                    },\r\n                    databaseSettings,\r\n                    // overwrites\r\n                    {\r\n                        /**\r\n                         * RxDB uses its custom load and save handling\r\n                         * so we disable the LokiJS save/load handlers.\r\n                         */\r\n                        autoload: false,\r\n                        autosave: false,\r\n                        throttledSaves: false\r\n                    }\r\n                );\r\n                const database = new Loki(\r\n                    databaseName + '.db',\r\n                    flatClone(useSettings)\r\n                );\r\n                const lokiSaveQueue = new LokiSaveQueue(\r\n                    database,\r\n                    useSettings\r\n                );\r\n\r\n                /**\r\n                 * Wait until all data is loaded from persistence adapter.\r\n                 * Wrap the loading into the saveQueue to ensure that when many\r\n                 * collections are created at the same time, the load-calls do not interfere\r\n                 * with each other and cause error logs.\r\n                 */\r\n                if (hasPersistence) {\r\n                    const loadDatabasePromise = new Promise<void>((res, rej) => {\r\n                        try {\r\n                            database.loadDatabase({\r\n                                recursiveWait: false\r\n                            }, (err) => {\r\n                                if (useSettings.autoloadCallback) {\r\n                                    useSettings.autoloadCallback(err);\r\n                                }\r\n                                if (err) {\r\n                                    rej(err);\r\n                                } else {\r\n                                    res();\r\n                                }\r\n                            });\r\n                        } catch (err) {\r\n                            rej(err);\r\n                        }\r\n                    });\r\n                    lokiSaveQueue.saveQueue = lokiSaveQueue.saveQueue.then(() => loadDatabasePromise);\r\n                    await loadDatabasePromise;\r\n                }\r\n\r\n                /**\r\n                 * Autosave database on process end\r\n                 */\r\n                const unloads: AddReturn[] = [];\r\n                if (hasPersistence) {\r\n                    unloads.push(\r\n                        unloadAdd(() => lokiSaveQueue.run())\r\n                    );\r\n                }\r\n\r\n                const state: LokiDatabaseState = {\r\n                    database,\r\n                    databaseSettings: useSettings,\r\n                    saveQueue: lokiSaveQueue,\r\n                    collections: {},\r\n                    unloads\r\n                };\r\n\r\n                return state;\r\n            })();\r\n            return databaseState;\r\n        }\r\n    );\r\n}\r\n\r\nexport async function closeLokiCollections(\r\n    databaseName: string,\r\n    collections: any[]\r\n) {\r\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\r\n    if (!databaseState) {\r\n        // already closed\r\n        return;\r\n    }\r\n    await databaseState.saveQueue.run();\r\n    collections.forEach(collection => {\r\n        const collectionName = collection.name;\r\n        delete databaseState.collections[collectionName];\r\n    });\r\n    if (Object.keys(databaseState.collections).length === 0) {\r\n        // all collections closed -> also close database\r\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\r\n        databaseState.unloads.forEach(u => u.remove());\r\n        await new Promise<void>((res, rej) => {\r\n            databaseState.database.close((err: any) => {\r\n                if (err) {\r\n                    rej(err);\r\n                } else {\r\n                    res();\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * This function is at lokijs-helper\r\n * because we need it in multiple places.\r\n */\r\nexport function getLokiSortComparator<RxDocType>(\r\n    _schema: RxJsonSchema<RxDocumentData<RxDocType>>,\r\n    query: FilledMangoQuery<RxDocType>\r\n): DeterministicSortComparator<RxDocType> {\r\n    if (!query.sort) {\r\n        throw newRxError('SNH', { query });\r\n    }\r\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort;\r\n\r\n    const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\r\n        let compareResult: number = 0; // 1 | -1\r\n        sortOptions.find(sortPart => {\r\n            const fieldName: string = Object.keys(sortPart)[0];\r\n            const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\r\n            const directionMultiplier = direction === 'asc' ? 1 : -1;\r\n            const valueA: any = getProperty(a as any, fieldName);\r\n            const valueB: any = getProperty(b as any, fieldName);\r\n            if (valueA === valueB) {\r\n                return false;\r\n            } else {\r\n                if (valueA > valueB) {\r\n                    compareResult = 1 * directionMultiplier;\r\n                    return true;\r\n                } else {\r\n                    compareResult = -1 * directionMultiplier;\r\n                    return true;\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Two different objects should never have the same sort position.\r\n         * We ensure this by having the unique primaryKey in the sort params\r\n         * which is added by RxDB if not existing yet.\r\n         */\r\n        if (!compareResult) {\r\n            throw newRxError('SNH', { args: { query, a, b } });\r\n        }\r\n\r\n        return compareResult as any;\r\n    };\r\n    return fun;\r\n}\r\n\r\nexport function getLokiLeaderElector(\r\n    databaseInstanceToken: string,\r\n    broadcastChannelRefObject: any,\r\n    databaseName: string\r\n): LeaderElector {\r\n    const broadcastChannel = getBroadcastChannelReference(\r\n        RX_STORAGE_NAME_LOKIJS,\r\n        databaseInstanceToken,\r\n        databaseName,\r\n        broadcastChannelRefObject\r\n    );\r\n    const elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\r\n    return elector;\r\n}\r\n\r\n/**\r\n * For multi-instance usage, we send requests to the RxStorage\r\n * to the current leading instance over the BroadcastChannel.\r\n */\r\nexport async function requestRemoteInstance(\r\n    instance: RxStorageInstanceLoki<any>,\r\n    operation: string,\r\n    params: any[]\r\n): Promise<any | any[]> {\r\n    const isRxStorageInstanceLoki = typeof (instance as any).query === 'function';\r\n    const messageType = isRxStorageInstanceLoki ? LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE : LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE;\r\n\r\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\r\n    await waitUntilHasLeader(leaderElector);\r\n    const broadcastChannel = leaderElector.broadcastChannel;\r\n\r\n    type WinningPromise = {\r\n        retry: boolean;\r\n        result?: any;\r\n        error?: any;\r\n    };\r\n\r\n    let whenDeathListener: OnMessageHandler<any>;\r\n    const leaderDeadPromise = new Promise<WinningPromise>(res => {\r\n        whenDeathListener = (msg: any) => {\r\n            if (msg.context === 'leader' && msg.action === 'death') {\r\n                res({\r\n                    retry: true\r\n                });\r\n            }\r\n        };\r\n        broadcastChannel.addEventListener('internal', whenDeathListener);\r\n    });\r\n    const requestId = randomCouchString(12);\r\n    let responseListener: OnMessageHandler<any>;\r\n    const responsePromise = new Promise<WinningPromise>((res, _rej) => {\r\n        responseListener = (msg: any) => {\r\n            if (\r\n                msg.type === messageType &&\r\n                msg.response === true &&\r\n                msg.requestId === requestId\r\n            ) {\r\n                if (msg.isError) {\r\n                    res({\r\n                        retry: false,\r\n                        error: msg.result\r\n                    });\r\n                } else {\r\n                    res({\r\n                        retry: false,\r\n                        result: msg.result\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        broadcastChannel.addEventListener('message', responseListener);\r\n    });\r\n\r\n    // send out the request to the other instance\r\n    broadcastChannel.postMessage({\r\n        response: false,\r\n        type: messageType,\r\n        operation,\r\n        params,\r\n        requestId,\r\n        databaseName: instance.databaseName,\r\n        collectionName: instance.collectionName\r\n    });\r\n    let timeout: ReturnType<typeof setTimeout>;\r\n    return Promise.race([\r\n        leaderDeadPromise,\r\n        responsePromise,\r\n        // // comment in timeout to debug\r\n        // new Promise<WinningPromise>(res => {\r\n        //     timeout = setTimeout(() => {\r\n        //         res({ error: new Error('requestRemoteInstance() timeout errorored'), retry: false });\r\n        //     }, 500);\r\n        // })\r\n\r\n    ]).then(firstResolved => {\r\n        if (timeout) {\r\n            clearTimeout(timeout);\r\n        }\r\n\r\n        // clean up listeners\r\n        broadcastChannel.removeEventListener('message', responseListener);\r\n        broadcastChannel.removeEventListener('internal', whenDeathListener);\r\n\r\n        if (firstResolved.retry) {\r\n            /**\r\n             * The leader died while a remote request was running\r\n             * we re-run the whole operation.\r\n             * We cannot just re-run requestRemoteInstance()\r\n             * because the current instance might be the new leader now\r\n             * and then we have to use the local state instead of requesting the remote.\r\n             */\r\n            return (instance as any)[operation](...params);\r\n        } else {\r\n            if (firstResolved.error) {\r\n                throw firstResolved.error;\r\n            } else {\r\n                return firstResolved.result;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handles a request that came from a remote instance via requestRemoteInstance()\r\n * Runs the requested operation over the local db instance and sends back the result.\r\n */\r\nexport async function handleRemoteRequest(\r\n    instance: RxStorageInstanceLoki<any>,\r\n    msg: any\r\n) {\r\n    if (\r\n        msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\r\n        msg.requestId &&\r\n        msg.databaseName === instance.databaseName &&\r\n        msg.collectionName === instance.collectionName &&\r\n        !msg.response\r\n    ) {\r\n        const operation = (msg as any).operation;\r\n        const params = (msg as any).params;\r\n        let result: any;\r\n        let isError = false;\r\n        try {\r\n            result = await (instance as any)[operation](...params);\r\n        } catch (err) {\r\n            console.dir(err);\r\n            isError = true;\r\n            result = err;\r\n        }\r\n        const response: LokiRemoteResponseBroadcastMessage = {\r\n            response: true,\r\n            requestId: msg.requestId,\r\n            databaseName: instance.databaseName,\r\n            collectionName: instance.collectionName,\r\n            result,\r\n            isError,\r\n            type: msg.type\r\n        };\r\n        ensureNotFalsy(instance.internals.leaderElector).broadcastChannel.postMessage(response);\r\n    }\r\n}\r\n\r\nexport async function waitUntilHasLeader(leaderElector: LeaderElector) {\r\n    leaderElector.awaitLeadership().catch(() => { });\r\n    await promiseWait(0);\r\n    while (true) {\r\n        const has = await leaderElector.hasLeader();\r\n        if (\r\n            has ||\r\n            leaderElector.broadcastChannel.isClosed ||\r\n            leaderElector.isDead\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if (leaderElector.applyOnce) {\r\n            await leaderElector.applyOnce();\r\n        } else {\r\n            /**\r\n             * Trigger applying for leadership\r\n             * but do not await it in case another\r\n             * instance becomes leader first.\r\n             */\r\n            leaderElector.awaitLeadership().catch(() => { });\r\n        }\r\n        await promiseWait(20);\r\n    }\r\n}\r\n\r\n/**\r\n * If the local state must be used, that one is returned.\r\n * Returns false if a remote instance must be used.\r\n */\r\nexport async function mustUseLocalState(\r\n    instance: RxStorageInstanceLoki<any>\r\n): Promise<LokiLocalDatabaseState | false> {\r\n    if (instance.closed) {\r\n        /**\r\n         * If this happens, it means that RxDB made a call to an already closed storage instance.\r\n         * This must never happen because when RxDB closes a collection or database,\r\n         * all tasks must be cleared so that no more calls are made the the storage.\r\n         */\r\n        throw new Error('already closed ' + JSON.stringify(\r\n            {\r\n                instanceClosed: instance.closed,\r\n                databaseName: instance.databaseName,\r\n                collectionName: instance.collectionName\r\n            }\r\n        ));\r\n    }\r\n\r\n\r\n    if (instance.internals.localState) {\r\n        return instance.internals.localState;\r\n    }\r\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\r\n    await waitUntilHasLeader(leaderElector);\r\n\r\n    /**\r\n     * It might already have a localState after the applying\r\n     * because another subtask also called mustUSeLocalState()\r\n     */\r\n    if (instance.internals.localState) {\r\n        return instance.internals.localState;\r\n    }\r\n\r\n    if (\r\n        leaderElector.isLeader &&\r\n        !instance.internals.localState\r\n    ) {\r\n        // own is leader, use local instance\r\n        instance.internals.localState = createLokiLocalState<any>({\r\n            databaseInstanceToken: instance.databaseInstanceToken,\r\n            databaseName: instance.databaseName,\r\n            collectionName: instance.collectionName,\r\n            options: instance.options,\r\n            schema: (instance as RxStorageInstanceLoki<any>).schema,\r\n            multiInstance: instance.internals.leaderElector ? true : false,\r\n            devMode: overwritable.isDevMode()\r\n        }, instance.databaseSettings);\r\n        return ensureNotFalsy(instance.internals.localState);\r\n    } else {\r\n        // other is leader, send message to remote leading instance\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * LokiJS does not understand the 'official' $regex operator,\r\n * so we have to transform these back into RegExp objects.\r\n * @recursive\r\n */\r\nexport function transformRegexToRegExp(selector: any) {\r\n    if (typeof selector !== 'object' || selector === null) {\r\n        return selector;\r\n    }\r\n\r\n    const keys = Object.keys(selector);\r\n    const ret: any = {};\r\n    keys.forEach(key => {\r\n        const value: any = selector[key];\r\n        if (key === '$options') {\r\n            return;\r\n        }\r\n        if (\r\n            key === '$regex' &&\r\n            !(value instanceof RegExp)\r\n        ) {\r\n            const opts = selector['$options'];\r\n            ret[key] = new RegExp(value, opts);\r\n        } else if (Array.isArray(value)) {\r\n            ret[key] = value.map(item => transformRegexToRegExp(item));\r\n        } else {\r\n            ret[key] = transformRegexToRegExp(value);\r\n        }\r\n    });\r\n    return ret;\r\n}\r\n"],"mappings":"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","ignoreList":[]}