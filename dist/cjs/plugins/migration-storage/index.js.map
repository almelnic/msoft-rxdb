{"version":3,"file":"index.js","names":["_index","require","migrateStorage","params","collections","Object","values","database","batchSize","parallel","Promise","all","map","collection","migrateCollection","oldDatabaseName","oldStorage","afterMigrateBatch","logFunction","log","message","name","schema","jsonSchema","primaryPath","oldDatabaseInstanceToken","randomCouchString","rxdbVersion","indexes","clone","ensureNotFalsy","index","toArray","filter","field","includes","arrayFilterNotEmpty","oldStorageInstance","createStorageInstance","databaseName","collectionName","multiInstance","options","databaseInstanceToken","devMode","plainQuery","selector","_deleted","$eq","limit","sort","skip","preparedQuery","statics","prepareQuery","_loop","queryResult","query","docs","documents","length","remove","v","docsNonMutated","attachments","doc","docId","entries","_attachments","attachmentId","attachmentMeta","attachmentData","getAttachmentData","digest","attachmentDataString","blobToBase64String","data","type","insertToNewWriteRows","document","writeToNewResult","storageInstance","bulkWrite","writeToOldRows","_doc","idx","previous","_meta","lwt","Date","getTime","newDoc","_rev","createRevision","writeToOldResult","keys","error","console","dir","errors","Error","err","cleanup","catch","_ret"],"sources":["../../../../src/plugins/migration-storage/index.ts"],"sourcesContent":["import {\r\n    RxDatabase,\r\n    RxCollection,\r\n    createRevision,\r\n    clone,\r\n    BulkWriteRow,\r\n    RxStorageBulkWriteResponse,\r\n    randomCouchString,\r\n    RxStorage,\r\n    blobToBase64String,\r\n    prepareQuery,\r\n    PreparedQuery,\r\n    FilledMangoQuery,\r\n    ensureNotFalsy,\r\n    toArray,\r\n    arrayFilterNotEmpty\r\n} from '../../index.ts';\r\n\r\nexport type RxStorageOld<A, B> = RxStorage<A, B> | any;\r\n\r\nexport type AfterMigrateBatchHandlerInput = {\r\n    databaseName: string;\r\n    collectionName: string;\r\n    oldDatabaseName: string;\r\n    insertToNewWriteRows: BulkWriteRow<any>[];\r\n    writeToNewResult: RxStorageBulkWriteResponse<any>;\r\n};\r\nexport type AfterMigrateBatchHandler = (\r\n    input: AfterMigrateBatchHandlerInput\r\n) => any | Promise<any>;\r\n\r\n\r\nexport type MigrateStorageParams = {\r\n    database: RxDatabase;\r\n    /**\r\n     * Using the migration plugin requires you\r\n     * to rename your new old database.\r\n     * The original name of the v11 database must be provided here.\r\n     */\r\n    oldDatabaseName: string;\r\n    oldStorage: RxStorageOld<any, any>;\r\n    batchSize?: number;\r\n    parallel?: boolean;\r\n    afterMigrateBatch?: AfterMigrateBatchHandler;\r\n    // to log each step, pass console.log.bind(console) here.\r\n    logFunction?: (message: string) => void;\r\n}\r\n\r\n/**\r\n * Migrates collections of RxDB version A and puts them\r\n * into a RxDatabase that is created with version B.\r\n * This function only works from the previous major version upwards.\r\n * Do not use it to migrate like rxdb v9 to v14. \r\n */\r\nexport async function migrateStorage(\r\n    params: MigrateStorageParams\r\n): Promise<void> {\r\n    const collections = Object.values(params.database.collections);\r\n    const batchSize = params.batchSize ? params.batchSize : 10;\r\n    if (params.parallel) {\r\n        await Promise.all(\r\n            collections.map(collection => migrateCollection(\r\n                collection,\r\n                params.oldDatabaseName,\r\n                params.oldStorage,\r\n                batchSize,\r\n                params.afterMigrateBatch,\r\n                params.logFunction\r\n            ))\r\n        );\r\n    } else {\r\n        for (const collection of collections) {\r\n            await migrateCollection(\r\n                collection,\r\n                params.oldDatabaseName,\r\n                params.oldStorage,\r\n                batchSize,\r\n                params.afterMigrateBatch,\r\n                params.logFunction\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport async function migrateCollection<RxDocType>(\r\n    collection: RxCollection<RxDocType>,\r\n    oldDatabaseName: string,\r\n    oldStorage: RxStorageOld<any, any>,\r\n    batchSize: number,\r\n    afterMigrateBatch?: AfterMigrateBatchHandler,\r\n    // to log each step, pass console.log.bind(console) here.\r\n    logFunction?: (message: string) => void\r\n) {\r\n    function log(message: string) {\r\n        if (logFunction) {\r\n            logFunction('migrateCollection(' + collection.name + ')' + message);\r\n        }\r\n    }\r\n    log('start migrateCollection()');\r\n    let schema = collection.schema.jsonSchema;\r\n    const primaryPath = collection.schema.primaryPath;\r\n    const oldDatabaseInstanceToken = randomCouchString(10);\r\n\r\n\r\n    /**\r\n     * In RxDB v15 we changed how the indexes are created.\r\n     * Before (v14), the storage prepended the _deleted field\r\n     * to all indexes.\r\n     * In v15, RxDB will prepend the _deleted field BEFORE sending\r\n     * it to the storage. Therefore we have to strip these fields\r\n     * when crating v14 storage instances.\r\n     */\r\n    if (!oldStorage.rxdbVersion && schema.indexes) {\r\n        schema = clone(schema);\r\n        schema.indexes = ensureNotFalsy(schema.indexes).map(index => {\r\n            index = toArray(index).filter(field => field !== '_deleted');\r\n            if (index.includes('_meta.lwt')) {\r\n                return null;\r\n            }\r\n            return index;\r\n        }).filter(arrayFilterNotEmpty);\r\n\r\n    }\r\n\r\n    const oldStorageInstance = await oldStorage.createStorageInstance({\r\n        databaseName: oldDatabaseName,\r\n        collectionName: collection.name,\r\n        multiInstance: false,\r\n        options: {},\r\n        schema: schema,\r\n        databaseInstanceToken: oldDatabaseInstanceToken,\r\n        devMode: false\r\n    });\r\n\r\n\r\n    const plainQuery: FilledMangoQuery<RxDocType> = {\r\n        selector: {\r\n            _deleted: {\r\n                $eq: false\r\n            }\r\n        } as any,\r\n        limit: batchSize,\r\n        sort: [{ [primaryPath]: 'asc' } as any],\r\n        skip: 0\r\n    };\r\n\r\n    /**\r\n     * In RxDB v15 we removed statics.prepareQuery()\r\n     * But to be downwards compatible, still use that\r\n     * when migrating from an old storage.\r\n     * TODO remove this in the next major version. v16.\r\n     */\r\n    let preparedQuery: PreparedQuery<RxDocType>;\r\n    if (oldStorage.statics && oldStorage.statics.prepareQuery) {\r\n        preparedQuery = oldStorage.statics.prepareQuery(\r\n            schema,\r\n            plainQuery\r\n        );\r\n    } else {\r\n        preparedQuery = prepareQuery(\r\n            schema,\r\n            plainQuery\r\n        );\r\n    }\r\n\r\n    while (true) {\r\n        log('loop once');\r\n        /**\r\n         * Get a batch of documents\r\n         */\r\n        const queryResult = await oldStorageInstance.query(preparedQuery);\r\n        const docs = queryResult.documents;\r\n        if (docs.length === 0) {\r\n            /**\r\n             * No more documents to migrate\r\n             */\r\n            log('migration of collection done');\r\n            await oldStorageInstance.remove();\r\n            return;\r\n        }\r\n\r\n        const docsNonMutated = clone(docs);\r\n\r\n        /**\r\n         * Get attachments\r\n         * if defined in the schema.\r\n         */\r\n        if (schema.attachments) {\r\n            await Promise.all(\r\n                docs.map(async (doc: any) => {\r\n                    const docId: string = (doc as any)[primaryPath];\r\n                    await Promise.all(\r\n                        Object.entries(doc._attachments).map(async ([attachmentId, attachmentMeta]) => {\r\n                            const attachmentData = await oldStorageInstance.getAttachmentData(\r\n                                docId,\r\n                                attachmentId,\r\n                                (attachmentMeta as any).digest\r\n                            );\r\n                            const attachmentDataString = await blobToBase64String(attachmentData);\r\n                            (doc as any)._attachments[attachmentId] = {\r\n                                data: attachmentDataString,\r\n                                digest: (attachmentMeta as any).digest,\r\n                                length: (attachmentMeta as any).length,\r\n                                type: (attachmentMeta as any).type\r\n                            }\r\n                        })\r\n                    );\r\n                })\r\n            );\r\n            log('got attachments');\r\n        }\r\n\r\n        /**\r\n         * Insert the documents to the new storage\r\n         */\r\n        const insertToNewWriteRows: BulkWriteRow<any>[] = docs.map((document: any) => {\r\n            return { document };\r\n        });\r\n        const writeToNewResult: RxStorageBulkWriteResponse<any> = await collection.storageInstance.bulkWrite(\r\n            insertToNewWriteRows,\r\n            'migrate-storage'\r\n        );\r\n        log('written batch to new storage');\r\n\r\n        // TODO we should throw on non-conflict errors here.\r\n        // if (Object.keys(writeToNewResult.error).length > 0) {\r\n        //     throw new Error('could not write to new storage');\r\n        // }\r\n\r\n        /**\r\n         * Remove the docs from the old storage\r\n         */\r\n        const writeToOldRows = docs.map((_doc: any, idx: number) => {\r\n            const previous = docsNonMutated[idx];\r\n            if (!previous._meta) {\r\n                previous._meta = {\r\n                    lwt: new Date().getTime()\r\n                };\r\n            }\r\n\r\n            const newDoc: typeof previous = clone(previous);\r\n            newDoc._deleted = true;\r\n            if (!newDoc._meta) {\r\n                newDoc._meta = {\r\n                    lwt: new Date().getTime()\r\n                };\r\n            }\r\n            newDoc._meta.lwt = new Date().getTime() + 1;\r\n            newDoc._rev = createRevision(\r\n                oldDatabaseInstanceToken,\r\n                previous\r\n            );\r\n\r\n            return {\r\n                previous,\r\n                document: newDoc,\r\n            }\r\n        });\r\n        try {\r\n            const writeToOldResult = await oldStorageInstance.bulkWrite(\r\n                writeToOldRows,\r\n                'migrate-between-rxdb-versions'\r\n            );\r\n            if (Object.keys(writeToOldResult.error).length > 0) {\r\n                console.dir({\r\n                    writeToOldRows,\r\n                    errors: writeToOldResult.error\r\n                });\r\n                throw new Error('got error while deleting migrated documents on the old storage');\r\n            }\r\n        } catch (err) {\r\n            log('could not delete on old instance');\r\n            console.dir(err);\r\n            throw err;\r\n        }\r\n        log('deleted batch on old storage');\r\n        await oldStorageInstance.cleanup(0)\r\n            .catch(() => {\r\n                /**\r\n                 * Migration from RxDB v14 to v15 had problem running the cleanup()\r\n                 * on the old storage because the indexing structure changed.\r\n                 * Because the periodic cleanup during migration\r\n                 * is an optional step, we just log instead of throwing an error.\r\n                 * @link https://github.com/pubkey/rxdb/issues/5565\r\n                 * \r\n                 * TODO remove this in the next major version\r\n                 */\r\n                log('oldStorageInstance.cleanup(0) has thrown');\r\n            });\r\n\r\n        // run the handler if provided\r\n        if (afterMigrateBatch) {\r\n            await afterMigrateBatch({\r\n                databaseName: collection.database.name,\r\n                collectionName: collection.name,\r\n                oldDatabaseName,\r\n                insertToNewWriteRows,\r\n                writeToNewResult\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}