{"version":3,"file":"remote.js","names":["_rxjs","require","_index","_storageRemoteHelpers","_rxStorageHelper","exposeRxStorageRemote","settings","instanceByFullName","Map","messages$","pipe","filter","msg","method","subscribe","customRequestHandler","send","createErrorAnswer","Error","result","params","createAnswer","err","getRxStorageInstance","storage","createStorageInstance","database","storageInstances","Array","from","collectionName","storageInstance","find","instance","console","dir","JSON","stringify","schema","deepEqual","existingSchema","Promise","resolve","connectionId","isArray","fullName","databaseName","version","join","state","get","storageInstancePromise","connectionIds","Set","set","add","subs","push","changeStream","changes","message","answerTo","return","conflictResultionTasks","conflicts","connectionClosed","closeThisConnection","forEach","sub","unsubscribe","ensureNotFalsy","delete","collection","collections","onDestroy","subMsg","plainMessage","size","getChangedDocumentsSince"],"sources":["../../../../src/plugins/storage-remote/remote.ts"],"sourcesContent":["import { filter, Subscription } from 'rxjs';\r\nimport type {\r\n    RxStorageInstance,\r\n    RxStorageInstanceCreationParams\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    deepEqual,\r\n    ensureNotFalsy\r\n} from '../../plugins/utils/index.ts';\r\nimport { createAnswer, createErrorAnswer } from './storage-remote-helpers.ts';\r\nimport type {\r\n    MessageFromRemote,\r\n    MessageToRemote,\r\n    RxStorageRemoteExposeSettings,\r\n    RxStorageRemoteExposeSettingsRxDatabase,\r\n    RxStorageRemoteExposeSettingsRxStorage,\r\n    RxStorageRemoteExposeType\r\n} from './storage-remote-types.ts';\r\nimport { getChangedDocumentsSince } from '../../rx-storage-helper.ts';\r\n\r\n/**\r\n * Run this on the 'remote' part,\r\n * so that RxStorageMessageChannel can connect to it.\r\n */\r\nexport function exposeRxStorageRemote(settings: RxStorageRemoteExposeSettings): RxStorageRemoteExposeType {\r\n    type InstanceState = {\r\n        storageInstancePromise: Promise<RxStorageInstance<any, any, any>>;\r\n        connectionIds: Set<string>;\r\n        params: RxStorageInstanceCreationParams<any, any>;\r\n    };\r\n    const instanceByFullName: Map<string, InstanceState> = new Map();\r\n\r\n\r\n    settings.messages$.pipe(\r\n        filter(msg => msg.method === 'custom')\r\n    ).subscribe(async (msg) => {\r\n        if (!settings.customRequestHandler) {\r\n            settings.send(createErrorAnswer(\r\n                msg,\r\n                new Error('Remote storage: cannot resolve custom request because settings.customRequestHandler is not set')\r\n            ));\r\n        } else {\r\n            try {\r\n                const result = await settings.customRequestHandler(msg.params);\r\n                settings.send(createAnswer(msg, result));\r\n            } catch (err: any) {\r\n                settings.send(createErrorAnswer(\r\n                    msg,\r\n                    err\r\n                ));\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    function getRxStorageInstance<RxDocType>(params: any): Promise<RxStorageInstance<RxDocType, any, any, any>> {\r\n        if ((settings as RxStorageRemoteExposeSettingsRxStorage).storage) {\r\n            return (settings as RxStorageRemoteExposeSettingsRxStorage).storage.createStorageInstance(params);\r\n        } else if ((settings as RxStorageRemoteExposeSettingsRxDatabase).database) {\r\n            const storageInstances = Array.from((settings as RxStorageRemoteExposeSettingsRxDatabase).database.storageInstances);\r\n            const collectionName = params.collectionName;\r\n            const storageInstance = storageInstances.find(instance => instance.collectionName === collectionName);\r\n            if (!storageInstance) {\r\n                console.dir(storageInstances);\r\n                throw new Error('storageInstance does not exist ' + JSON.stringify({\r\n                    collectionName\r\n                }));\r\n            }\r\n            const schema = params.schema;\r\n            if (!deepEqual(schema, storageInstance.schema)) {\r\n                throw new Error('Wrong schema ' + JSON.stringify({\r\n                    schema,\r\n                    existingSchema: storageInstance.schema\r\n                }));\r\n            }\r\n            return Promise.resolve(storageInstance);\r\n        } else {\r\n            throw new Error('no base given');\r\n        }\r\n    }\r\n\r\n    settings.messages$.pipe(\r\n        filter(msg => msg.method === 'create')\r\n    ).subscribe(async (msg) => {\r\n        const connectionId = msg.connectionId;\r\n\r\n        /**\r\n         * Do an isArray check here\r\n         * for runtime check types to ensure we have\r\n         * instance creation params and not method input params.\r\n        */\r\n        if (Array.isArray(msg.params)) {\r\n            return;\r\n        }\r\n        const params = msg.params;\r\n        const collectionName = params.collectionName;\r\n\r\n        /**\r\n         * We de-duplicate the storage instances.\r\n         * This makes sense in many environments like\r\n         * electron where on main process contains the storage\r\n         * for multiple renderer processes. Same goes for SharedWorkers etc.\r\n         */\r\n        const fullName = [\r\n            params.databaseName,\r\n            params.collectionName,\r\n            params.schema.version\r\n        ].join('|');\r\n        let state = instanceByFullName.get(fullName);\r\n        if (!state) {\r\n            try {\r\n                state = {\r\n                    /**\r\n                     * We work with a promise here to ensure\r\n                     * that parallel create-calls will still end up\r\n                     * with exactly one instance and not more.\r\n                     */\r\n                    storageInstancePromise: getRxStorageInstance(params),\r\n                    connectionIds: new Set(),\r\n                    params\r\n                };\r\n                instanceByFullName.set(fullName, state);\r\n\r\n                /**\r\n                 * Must await the creation here\r\n                 * so that in case of an error,\r\n                 * it knows about the error message and can send\r\n                 * that back to the main process. \r\n                 */\r\n                await state.storageInstancePromise;\r\n            } catch (err: any) {\r\n                settings.send(createErrorAnswer(msg, err));\r\n                return;\r\n            }\r\n        } else {\r\n            // if instance already existed, ensure that the schema is equal\r\n            if (!deepEqual(params.schema, state.params.schema)) {\r\n                settings.send(createErrorAnswer(msg, new Error('Remote storage: schema not equal to existing storage')));\r\n                return;\r\n            }\r\n        }\r\n        state.connectionIds.add(msg.connectionId);\r\n        const subs: Subscription[] = [];\r\n\r\n        const storageInstance = await state.storageInstancePromise;\r\n        /**\r\n         * Automatically subscribe to the changeStream()\r\n         * because we always need them.\r\n         */\r\n        subs.push(\r\n            storageInstance.changeStream().subscribe(changes => {\r\n                const message: MessageFromRemote = {\r\n                    connectionId,\r\n                    answerTo: 'changestream',\r\n                    method: 'changeStream',\r\n                    return: changes\r\n                };\r\n                settings.send(message);\r\n            })\r\n        );\r\n        subs.push(\r\n            storageInstance.conflictResultionTasks().subscribe(conflicts => {\r\n                const message: MessageFromRemote = {\r\n                    connectionId,\r\n                    answerTo: 'conflictResultionTasks',\r\n                    method: 'conflictResultionTasks',\r\n                    return: conflicts\r\n                };\r\n                settings.send(message);\r\n            })\r\n        );\r\n\r\n\r\n        let connectionClosed = false;\r\n        function closeThisConnection() {\r\n            if (connectionClosed) {\r\n                return;\r\n            }\r\n            connectionClosed = true;\r\n            subs.forEach(sub => sub.unsubscribe());\r\n            ensureNotFalsy(state).connectionIds.delete(connectionId);\r\n            instanceByFullName.delete(fullName);\r\n            /**\r\n             * TODO how to notify the other ports on remove() ?\r\n             */\r\n        }\r\n\r\n        // also close the connection when the collection gets destroyed\r\n        if ((settings as RxStorageRemoteExposeSettingsRxDatabase).database) {\r\n            const database = (settings as RxStorageRemoteExposeSettingsRxDatabase).database;\r\n            const collection = database.collections[collectionName];\r\n            if (collection) {\r\n                collection.onDestroy.push(() => closeThisConnection());\r\n            } else {\r\n                database.onDestroy.push(() => closeThisConnection());\r\n            }\r\n        }\r\n\r\n        subs.push(\r\n            settings.messages$.pipe(\r\n                filter(subMsg => (subMsg as MessageToRemote).connectionId === connectionId)\r\n            ).subscribe(async (plainMessage) => {\r\n                const message: MessageToRemote = plainMessage as any;\r\n                if (\r\n                    message.method === 'create' ||\r\n                    message.method === 'custom'\r\n                ) {\r\n                    return;\r\n                }\r\n                if (!Array.isArray(message.params)) {\r\n                    return;\r\n                }\r\n                let result;\r\n                try {\r\n                    if (\r\n                        message.method === 'close' &&\r\n                        (settings as RxStorageRemoteExposeSettingsRxDatabase).database\r\n                    ) {\r\n                        /**\r\n                         * Do not close the storageInstance if it was taken from\r\n                         * a running RxDatabase.\r\n                         * In that case we only close the instance\r\n                         * when the RxDatabase gets destroyed.\r\n                         */\r\n                        settings.send(createAnswer(message, null));\r\n                        return;\r\n                    }\r\n                    /**\r\n                     * On calls to 'close()',\r\n                     * we only close the main instance if there are no other\r\n                     * ports connected.\r\n                     */\r\n                    if (\r\n                        message.method === 'close' &&\r\n                        ensureNotFalsy(state).connectionIds.size > 1\r\n                    ) {\r\n                        settings.send(createAnswer(message, null));\r\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\r\n                        subs.forEach(sub => sub.unsubscribe());\r\n                        return;\r\n                    }\r\n\r\n                    if (message.method === 'getChangedDocumentsSince' && !storageInstance.getChangedDocumentsSince) {\r\n                        result = await getChangedDocumentsSince(\r\n                            storageInstance,\r\n                            message.params[0],\r\n                            message.params[1]\r\n                        );\r\n                    } else {\r\n                        result = await (storageInstance as any)[message.method](\r\n                            message.params[0],\r\n                            message.params[1],\r\n                            message.params[2],\r\n                            message.params[3]\r\n                        );\r\n                    }\r\n                    if (\r\n                        message.method === 'close' ||\r\n                        message.method === 'remove'\r\n                    ) {\r\n                        closeThisConnection();\r\n                    }\r\n                    settings.send(createAnswer(message, result));\r\n                } catch (err: any) {\r\n                    settings.send(createErrorAnswer(message, err));\r\n                }\r\n            })\r\n        );\r\n\r\n        settings.send(createAnswer(msg, 'ok'));\r\n    });\r\n\r\n    return {\r\n        instanceByFullName\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]}