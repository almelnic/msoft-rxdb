{"version":3,"file":"check-query.js","names":["_rxError","require","_index","_rxQuery","checkQuery","args","isPlainObject","Object","prototype","toString","call","queryObj","newRxTypeError","op","collection","name","validKeys","keys","forEach","key","includes","limit","skip","newRxError","query","ensureObjectDoesNotContainRegExp","checkMangoQuery","schema","rxQuery","jsonSchema","massagedSelector","mangoQuery","selector","schemaTopLevelFields","properties","filter","fieldOrOperator","startsWith","field","schemaIndexes","indexes","index","isInSchema","find","schemaIndex","deepEqual","areSelectorsSatisfiedByIndex","database","allowSlowCount","sort","map","sortPart","preparedQuery","prepareQuery","queryPlan","selectorSatisfiedByIndex","value","RegExp","Array","isArray","item"],"sources":["../../../../src/plugins/dev-mode/check-query.ts"],"sourcesContent":["import type {\r\n    RxPluginPreCreateRxQueryArgs,\r\n    MangoQuery,\r\n    RxPluginPrePrepareQueryArgs,\r\n    FilledMangoQuery,\r\n    RxJsonSchema,\r\n    RxDocumentData,\r\n    MangoQuerySelector,\r\n    PreparedQuery\r\n} from '../../types/index.d.ts';\r\nimport { newRxError, newRxTypeError } from '../../rx-error.ts';\r\nimport { deepEqual } from '../utils/index.ts';\r\nimport { prepareQuery } from '../../rx-query.ts';\r\n\r\n/**\r\n * accidentally passing a non-valid object into the query params\r\n * is very hard to debug especially when queries are observed\r\n * This is why we do some checks here in dev-mode\r\n */\r\nexport function checkQuery(args: RxPluginPreCreateRxQueryArgs) {\r\n    const isPlainObject = Object.prototype.toString.call(args.queryObj) === '[object Object]';\r\n    if (!isPlainObject) {\r\n        throw newRxTypeError('QU11', {\r\n            op: args.op,\r\n            collection: args.collection.name,\r\n            queryObj: args.queryObj\r\n        });\r\n    }\r\n\r\n    const validKeys: (keyof MangoQuery)[] = [\r\n        'selector',\r\n        'limit',\r\n        'skip',\r\n        'sort',\r\n        'index'\r\n    ];\r\n    Object.keys(args.queryObj).forEach(key => {\r\n        if (!(validKeys as string[]).includes(key)) {\r\n            throw newRxTypeError('QU11', {\r\n                op: args.op,\r\n                collection: args.collection.name,\r\n                queryObj: args.queryObj,\r\n                key,\r\n                args: {\r\n                    validKeys\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    // do not allow skip or limit for count queries\r\n    if (\r\n        args.op === 'count' &&\r\n        (\r\n            args.queryObj.limit ||\r\n            args.queryObj.skip\r\n        )\r\n    ) {\r\n        throw newRxError(\r\n            'QU15',\r\n            {\r\n                collection: args.collection.name,\r\n                query: args.queryObj\r\n            }\r\n        );\r\n    }\r\n\r\n    ensureObjectDoesNotContainRegExp(args.queryObj);\r\n}\r\n\r\n\r\nexport function checkMangoQuery(args: RxPluginPrePrepareQueryArgs) {\r\n    const schema = args.rxQuery.collection.schema.jsonSchema;\r\n\r\n    /**\r\n     * Ensure that all top level fields are included in the schema.\r\n     * TODO this check can be augmented to also check sub-fields.\r\n     */\r\n    const massagedSelector: MangoQuerySelector<any> = args.mangoQuery.selector;\r\n    const schemaTopLevelFields = Object.keys(schema.properties);\r\n    Object.keys(massagedSelector)\r\n        // do not check operators\r\n        .filter(fieldOrOperator => !fieldOrOperator.startsWith('$'))\r\n        // skip this check on non-top-level fields\r\n        .filter(field => !field.includes('.'))\r\n        .forEach(field => {\r\n            if (!schemaTopLevelFields.includes(field)) {\r\n                throw newRxError('QU13', {\r\n                    schema,\r\n                    field,\r\n                    query: args.mangoQuery,\r\n                });\r\n            }\r\n        });\r\n\r\n    /**\r\n     * ensure if custom index is set,\r\n     * it is also defined in the schema\r\n     */\r\n    const schemaIndexes = schema.indexes ? schema.indexes : [];\r\n    const index = args.mangoQuery.index;\r\n    if (index) {\r\n        const isInSchema = schemaIndexes.find(schemaIndex => deepEqual(schemaIndex, index));\r\n        if (!isInSchema) {\r\n            throw newRxError(\r\n                'QU12',\r\n                {\r\n                    collection: args.rxQuery.collection.name,\r\n                    query: args.mangoQuery,\r\n                    schema\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Ensure that a count() query can only be used\r\n     * with selectors that are fully satisfied by the used index.\r\n     */\r\n    if (args.rxQuery.op === 'count') {\r\n        if (\r\n            !areSelectorsSatisfiedByIndex(\r\n                args.rxQuery.collection.schema.jsonSchema,\r\n                args.mangoQuery\r\n            ) &&\r\n            !args.rxQuery.collection.database.allowSlowCount\r\n        ) {\r\n            throw newRxError('QU14', {\r\n                collection: args.rxQuery.collection,\r\n                query: args.mangoQuery\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ensure that sort only runs on known fields\r\n     * TODO also check nested fields\r\n     */\r\n    if (args.mangoQuery.sort) {\r\n        args.mangoQuery.sort\r\n            .map(sortPart => Object.keys(sortPart)[0])\r\n            .filter(field => !field.includes('.'))\r\n            .forEach(field => {\r\n                if (!schemaTopLevelFields.includes(field)) {\r\n                    throw newRxError('QU13', {\r\n                        schema,\r\n                        field,\r\n                        query: args.mangoQuery,\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    // Do not allow RexExp instances\r\n    ensureObjectDoesNotContainRegExp(args.mangoQuery);\r\n}\r\n\r\n\r\nexport function areSelectorsSatisfiedByIndex<RxDocType>(\r\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\r\n    query: FilledMangoQuery<RxDocType>\r\n): boolean {\r\n    const preparedQuery: PreparedQuery<any> = prepareQuery(\r\n        schema,\r\n        query\r\n    );\r\n    return preparedQuery.queryPlan.selectorSatisfiedByIndex;\r\n}\r\n\r\n/**\r\n * Ensures that the selector does not contain any RegExp instance.\r\n * @recursive\r\n */\r\nexport function ensureObjectDoesNotContainRegExp(selector: any) {\r\n    if (typeof selector !== 'object' || selector === null) {\r\n        return;\r\n    }\r\n    const keys = Object.keys(selector);\r\n    keys.forEach(key => {\r\n        const value: any = selector[key];\r\n        if (value instanceof RegExp) {\r\n            throw newRxError('QU16', {\r\n                field: key,\r\n                query: selector,\r\n            });\r\n        } else if (Array.isArray(value)) {\r\n            value.forEach(item => ensureObjectDoesNotContainRegExp(item));\r\n        } else {\r\n            ensureObjectDoesNotContainRegExp(value);\r\n        }\r\n    });\r\n}\r\n"],"mappings":"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","ignoreList":[]}