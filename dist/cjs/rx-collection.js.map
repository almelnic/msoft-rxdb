{"version":3,"file":"rx-collection.js","names":["_rxjs","require","_index","_rxCollectionHelper","_rxQuery","_rxError","_docCache","_queryCache","_changeEventBuffer","_hooks","_rxDocumentPrototypeMerge","_rxStorageHelper","_index2","_incrementalWrite","_rxDocument","_overwritable","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","exports","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","defaultCacheReplacementPolicy","statics","conflictHandler","defaultConflictHandler","storageInstance","timeouts","Set","incrementalWriteQueue","awaitBeforeReads","_incrementalUpsertQueues","Map","synced","hooks","_subs","createQueryCache","$","checkpoint$","onDestroy","destroyed","onRemove","_applyHookFunctions","asRxCollection","_proto","prototype","prepare","getWrappedStorageInstance","jsonSchema","IncrementalWriteQueue","primaryPath","newData","oldData","beforeDocumentUpdateWrite","result","_runHooks","collectionEventBulks$","eventBulks$","pipe","filter","changeEventBulk","collectionName","mergeMap","events","map","checkpoint","createChangeEventBuffer","documentConstructor","DocumentCache","isLocal","b","docData","getRxDocumentConstructor","createNewRxDocument","listenToRemoveSub","internalStore","changeStream","bulk","key","version","found","find","event","documentData","context","operation","subscribe","destroy","Promise","all","fn","push","databaseStorageToken","storageToken","subDocs","eventBulk","Array","length","rawEvents","deepFreezeWhenDevMode","overwritable","index","documentId","previousDocumentData","id","internal","databaseToken","token","endTime","startTime","$emit","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","PROMISE_RESOLVE_VOID","cleanup","_minimumDeletedTime","ensureRxCollectionIsNotDestroyed","pluginMissing","migrationNeeded","getMigrationState","startMigration","batchSize","migratePromise","insert","json","writeResult","bulkInsert","isError","error","throwIfIsStorageWriteError","insertResult","ensureNotFalsy","success","docsData","insertRows","hasHooks","useDocData","fillObjectDataBeforeInsert","document","results","bulkWrite","rxDocuments","collection","ret","getWrittenDocumentsFromBulkWriteResponse","mapDocumentsDataToCacheDocs","docsMap","forEach","row","doc","set","get","primary","bulkRemove","ids","rxDocumentMap","findByIds","exec","from","values","rxDocument","data","toMutableJSON","removeDocs","writeDoc","flatClone","_deleted","previous","successIds","d","getFromMapOrThrow","bulkUpsert","insertData","useJsonByDocId","useJson","newRxError","slice","err","status","writeData","docDataInDb","documentInDb","getCachedRxDocuments","newDoc","incrementalModify","upsert","bulkResult","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","queryObj","_getDefaultQuery","query","createRxQuery","findOne","isArray","newRxTypeError","selector","limit","count","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","addPipeline","_options","addHook","when","fun","parallel","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","promiseSeries","_runHooksSync","promiseWait","time","res","timeout","setTimeout","delete","add","PROMISE_RESOLVE_FALSE","clearTimeout","requestIdlePromise","close","sub","unsubscribe","collections","runAsyncPluginHooks","remove","removeCollectionStorages","storage","password","hashFunction","_createClass2","default","cE","colProto","Object","getPrototypeOf","fnName","ucfirst","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","devMode","isDevMode","runPluginHooks","createRxCollectionStorageInstance","entries","funName","defineProperty","creator","catch","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\r\n    filter,\r\n    map,\r\n    mergeMap\r\n} from 'rxjs';\r\n\r\nimport {\r\n    ucfirst,\r\n    flatClone,\r\n    promiseSeries,\r\n    pluginMissing,\r\n    ensureNotFalsy,\r\n    getFromMapOrThrow,\r\n    PROMISE_RESOLVE_FALSE,\r\n    PROMISE_RESOLVE_VOID\r\n} from './plugins/utils/index.ts';\r\nimport {\r\n    fillObjectDataBeforeInsert,\r\n    createRxCollectionStorageInstance,\r\n    removeCollectionStorages,\r\n    ensureRxCollectionIsNotDestroyed\r\n} from './rx-collection-helper.ts';\r\nimport {\r\n    createRxQuery,\r\n    _getDefaultQuery\r\n} from './rx-query.ts';\r\nimport {\r\n    newRxError,\r\n    newRxTypeError\r\n} from './rx-error.ts';\r\nimport type {\r\n    RxMigrationState\r\n} from './plugins/migration-schema/index.ts';\r\nimport {\r\n    DocumentCache,\r\n    mapDocumentsDataToCacheDocs\r\n} from './doc-cache.ts';\r\nimport {\r\n    QueryCache,\r\n    createQueryCache,\r\n    defaultCacheReplacementPolicy\r\n} from './query-cache.ts';\r\nimport {\r\n    ChangeEventBuffer,\r\n    createChangeEventBuffer\r\n} from './change-event-buffer.ts';\r\nimport {\r\n    runAsyncPluginHooks,\r\n    runPluginHooks\r\n} from './hooks.ts';\r\n\r\nimport {\r\n    Subscription,\r\n    Observable\r\n} from 'rxjs';\r\n\r\nimport type {\r\n    KeyFunctionMap,\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxQuery,\r\n    RxDocument,\r\n    RxDumpCollection,\r\n    RxDumpCollectionAny,\r\n    MangoQuery,\r\n    MangoQueryNoLimit,\r\n    RxCacheReplacementPolicy,\r\n    RxStorageWriteError,\r\n    RxDocumentData,\r\n    RxStorageInstanceCreationParams,\r\n    BulkWriteRow,\r\n    RxChangeEvent,\r\n    RxChangeEventInsert,\r\n    RxChangeEventUpdate,\r\n    RxChangeEventDelete,\r\n    RxStorageInstance,\r\n    CollectionsOfDatabase,\r\n    RxChangeEventBulk,\r\n    RxLocalDocumentData,\r\n    RxDocumentBase,\r\n    RxConflictHandler,\r\n    MaybePromise,\r\n    CRDTEntry,\r\n    MangoQuerySelectorAndIndex,\r\n    MigrationStrategies\r\n} from './types/index.d.ts';\r\n\r\nimport {\r\n    RxSchema\r\n} from './rx-schema.ts';\r\n\r\nimport {\r\n    createNewRxDocument,\r\n    getRxDocumentConstructor\r\n} from './rx-document-prototype-merge.ts';\r\nimport {\r\n    getWrappedStorageInstance,\r\n    getWrittenDocumentsFromBulkWriteResponse,\r\n    throwIfIsStorageWriteError,\r\n    WrappedRxStorageInstance\r\n} from './rx-storage-helper.ts';\r\nimport { defaultConflictHandler } from './replication-protocol/index.ts';\r\nimport { IncrementalWriteQueue } from './incremental-write.ts';\r\nimport { beforeDocumentUpdateWrite } from './rx-document.ts';\r\nimport { overwritable } from './overwritable.ts';\r\nimport type { RxPipeline, RxPipelineOptions } from './plugins/pipeline/index.ts';\r\n\r\nconst HOOKS_WHEN = ['pre', 'post'] as const;\r\ntype HookWhenType = typeof HOOKS_WHEN[number];\r\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\r\ntype HookKeyType = typeof HOOKS_KEYS[number];\r\nlet hooksApplied = false;\r\n\r\nexport class RxCollectionBase<\r\n    InstanceCreationOptions,\r\n    RxDocumentType = { [prop: string]: any; },\r\n    OrmMethods = {},\r\n    StaticMethods = { [key: string]: any; },\r\n    Reactivity = any\r\n> {\r\n\r\n\r\n    /**\r\n     * Stores all 'normal' documents\r\n     */\r\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\r\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\r\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\r\n\r\n\r\n    /**\r\n     * Before reads, all these methods are awaited. Used to \"block\" reads\r\n     * depending on other processes, like when the RxPipeline is running.\r\n     */\r\n    public readonly awaitBeforeReads = new Set<() => MaybePromise<any>>();\r\n\r\n    constructor(\r\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions, Reactivity>,\r\n        public name: string,\r\n        public schema: RxSchema<RxDocumentType>,\r\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\r\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\r\n        public migrationStrategies: MigrationStrategies = {},\r\n        public methods: KeyFunctionMap = {},\r\n        public attachments: KeyFunctionMap = {},\r\n        public options: any = {},\r\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\r\n        public statics: KeyFunctionMap = {},\r\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\r\n    ) {\r\n        _applyHookFunctions(this.asRxCollection);\r\n    }\r\n\r\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\r\n        return this.$.pipe(\r\n            filter(cE => cE.operation === 'INSERT')\r\n        ) as any;\r\n    }\r\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\r\n        return this.$.pipe(\r\n            filter(cE => cE.operation === 'UPDATE')\r\n        ) as any;\r\n    }\r\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\r\n        return this.$.pipe(\r\n            filter(cE => cE.operation === 'DELETE')\r\n        ) as any;\r\n    }\r\n\r\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\r\n    // defaults\r\n    public synced: boolean = false;\r\n    public hooks: {\r\n        [key in HookKeyType]: {\r\n            [when in HookWhenType]: {\r\n                series: Function[];\r\n                parallel: Function[];\r\n            };\r\n        }\r\n    } = {} as any;\r\n    public _subs: Subscription[] = [];\r\n\r\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\r\n\r\n    public _queryCache: QueryCache = createQueryCache();\r\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\r\n    public checkpoint$: Observable<any> = {} as any;\r\n    public _changeEventBuffer: ChangeEventBuffer<RxDocumentType> = {} as ChangeEventBuffer<RxDocumentType>;\r\n\r\n\r\n\r\n    /**\r\n     * When the collection is destroyed,\r\n     * these functions will be called an awaited.\r\n     * Used to automatically clean up stuff that\r\n     * belongs to this collection.\r\n    */\r\n    public onDestroy: (() => MaybePromise<any>)[] = [];\r\n    public destroyed = false;\r\n\r\n    public onRemove: (() => MaybePromise<any>)[] = [];\r\n\r\n    public async prepare(): Promise<void> {\r\n        this.storageInstance = getWrappedStorageInstance(\r\n            this.database,\r\n            this.internalStorageInstance,\r\n            this.schema.jsonSchema\r\n        );\r\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\r\n            this.storageInstance,\r\n            this.schema.primaryPath,\r\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\r\n            result => this._runHooks('post', 'save', result)\r\n        );\r\n\r\n        const collectionEventBulks$ = this.database.eventBulks$.pipe(\r\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\r\n        );\r\n        this.$ = collectionEventBulks$.pipe(\r\n            mergeMap(changeEventBulk => changeEventBulk.events),\r\n        );\r\n        this.checkpoint$ = collectionEventBulks$.pipe(\r\n            map(changeEventBulk => changeEventBulk.checkpoint),\r\n        );\r\n\r\n        this._changeEventBuffer = createChangeEventBuffer<RxDocumentType>(this.asRxCollection);\r\n        let documentConstructor: any;\r\n        this._docCache = new DocumentCache(\r\n            this.schema.primaryPath,\r\n            this.database.eventBulks$.pipe(\r\n                filter(changeEventBulk => changeEventBulk.collectionName === this.name && !changeEventBulk.events[0].isLocal),\r\n                map(b => b.events)\r\n            ),\r\n            docData => {\r\n                if (!documentConstructor) {\r\n                    documentConstructor = getRxDocumentConstructor(this.asRxCollection);\r\n                }\r\n                return createNewRxDocument(this.asRxCollection, documentConstructor, docData);\r\n            }\r\n        );\r\n\r\n\r\n        const listenToRemoveSub = this.database.internalStore.changeStream().pipe(\r\n            filter(bulk => {\r\n                const key = this.name + '-' + this.schema.version;\r\n                const found = bulk.events.find(event => {\r\n                    return (\r\n                        event.documentData.context === 'collection' &&\r\n                        event.documentData.key === key &&\r\n                        event.operation === 'DELETE'\r\n                    );\r\n                });\r\n                return !!found;\r\n            })\r\n        ).subscribe(async () => {\r\n            await this.destroy();\r\n            await Promise.all(this.onRemove.map(fn => fn()));\r\n        });\r\n        this._subs.push(listenToRemoveSub);\r\n\r\n\r\n        /**\r\n         * TODO Instead of resolving the EventBulk array here and spit it into\r\n         * single events, we should fully work with event bulks internally\r\n         * to save performance.\r\n         */\r\n        const databaseStorageToken = await this.database.storageToken;\r\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\r\n            const events = new Array(eventBulk.events.length);\r\n            const rawEvents = eventBulk.events;\r\n            const collectionName = this.name;\r\n            const deepFreezeWhenDevMode = overwritable.deepFreezeWhenDevMode;\r\n            for (let index = 0; index < rawEvents.length; index++) {\r\n                const event = rawEvents[index];\r\n                events[index] = {\r\n                    documentId: event.documentId,\r\n                    collectionName,\r\n                    isLocal: false,\r\n                    operation: event.operation,\r\n                    documentData: deepFreezeWhenDevMode(event.documentData) as any,\r\n                    previousDocumentData: deepFreezeWhenDevMode(event.previousDocumentData) as any\r\n                };\r\n            }\r\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\r\n                id: eventBulk.id,\r\n                internal: false,\r\n                collectionName: this.name,\r\n                storageToken: databaseStorageToken,\r\n                events,\r\n                databaseToken: this.database.token,\r\n                checkpoint: eventBulk.checkpoint,\r\n                context: eventBulk.context,\r\n                endTime: eventBulk.endTime,\r\n                startTime: eventBulk.startTime\r\n            };\r\n            this.database.$emit(changeEventBulk);\r\n        });\r\n        this._subs.push(subDocs);\r\n\r\n        /**\r\n         * Resolve the conflict tasks\r\n         * of the RxStorageInstance\r\n         */\r\n        this._subs.push(\r\n            this.storageInstance\r\n                .conflictResultionTasks()\r\n                .subscribe(task => {\r\n                    this\r\n                        .conflictHandler(task.input, task.context)\r\n                        .then(output => {\r\n                            this.storageInstance.resolveConflictResultionTask({\r\n                                id: task.id,\r\n                                output\r\n                            });\r\n                        });\r\n                })\r\n        );\r\n\r\n        return PROMISE_RESOLVE_VOID;\r\n    }\r\n\r\n\r\n    /**\r\n     * Manually call the cleanup function of the storage.\r\n     * @link https://rxdb.info/cleanup.html\r\n     */\r\n    cleanup(_minimumDeletedTime?: number): Promise<boolean> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        throw pluginMissing('cleanup');\r\n    }\r\n\r\n    // overwritten by migration-plugin\r\n    migrationNeeded(): Promise<boolean> {\r\n        throw pluginMissing('migration-schema');\r\n    }\r\n    getMigrationState(): RxMigrationState {\r\n        throw pluginMissing('migration-schema');\r\n    }\r\n    startMigration(batchSize: number = 10): Promise<void> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        return this.getMigrationState().startMigration(batchSize);\r\n    }\r\n    migratePromise(batchSize: number = 10): Promise<any> {\r\n        return this.getMigrationState().migratePromise(batchSize);\r\n    }\r\n\r\n    async insert(\r\n        json: RxDocumentType | RxDocument\r\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const writeResult = await this.bulkInsert([json as any]);\r\n\r\n        const isError = writeResult.error[0];\r\n        throwIfIsStorageWriteError(this as any, (json as any)[this.schema.primaryPath] as any, json, isError);\r\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\r\n        return insertResult;\r\n    }\r\n\r\n    async bulkInsert(\r\n        docsData: RxDocumentType[]\r\n    ): Promise<{\r\n        success: RxDocument<RxDocumentType, OrmMethods>[];\r\n        error: RxStorageWriteError<RxDocumentType>[];\r\n    }> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        /**\r\n         * Optimization shortcut,\r\n         * do nothing when called with an empty array\r\n        */\r\n        if (docsData.length === 0) {\r\n            return {\r\n                success: [],\r\n                error: []\r\n            };\r\n        }\r\n\r\n        const primaryPath = this.schema.primaryPath;\r\n\r\n\r\n        /**\r\n         * This code is a bit redundant for better performance.\r\n         * Instead of iterating multiple times,\r\n         * we directly transform the input to a write-row array.\r\n         */\r\n        let insertRows: BulkWriteRow<RxDocumentType>[];\r\n        if (this.hasHooks('pre', 'insert')) {\r\n            insertRows = await Promise.all(\r\n                docsData.map(docData => {\r\n                    const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\r\n                    return this._runHooks('pre', 'insert', useDocData)\r\n                        .then(() => {\r\n                            return { document: useDocData };\r\n                        });\r\n                })\r\n            );\r\n        } else {\r\n            insertRows = new Array(docsData.length);\r\n            const schema = this.schema;\r\n            for (let index = 0; index < docsData.length; index++) {\r\n                const docData = docsData[index];\r\n                const useDocData = fillObjectDataBeforeInsert(schema, docData);\r\n                insertRows[index] = { document: useDocData };\r\n            }\r\n        }\r\n\r\n        const results = await this.storageInstance.bulkWrite(\r\n            insertRows,\r\n            'rx-collection-bulk-insert'\r\n        );\r\n\r\n\r\n        /**\r\n         * Often the user does not need to access the RxDocuments of the bulkInsert() call.\r\n         * So we transform the data to RxDocuments only if needed to use less CPU performance.\r\n         */\r\n        let rxDocuments: RxDocument<RxDocumentType, OrmMethods>[];\r\n        const collection = this;\r\n        const ret = {\r\n            get success() {\r\n                if (!rxDocuments) {\r\n                    const success = getWrittenDocumentsFromBulkWriteResponse(\r\n                        collection.schema.primaryPath,\r\n                        insertRows,\r\n                        results\r\n                    );\r\n                    rxDocuments = mapDocumentsDataToCacheDocs<RxDocumentType, OrmMethods>(collection._docCache, success);\r\n                }\r\n                return rxDocuments;\r\n            },\r\n            error: results.error\r\n        };\r\n\r\n        if (this.hasHooks('post', 'insert')) {\r\n            const docsMap: Map<string, RxDocumentType> = new Map();\r\n            insertRows.forEach(row => {\r\n                const doc = row.document;\r\n                docsMap.set((doc as any)[primaryPath] as any, doc);\r\n            });\r\n            await Promise.all(\r\n                ret.success.map(doc => {\r\n                    return this._runHooks(\r\n                        'post',\r\n                        'insert',\r\n                        docsMap.get(doc.primary),\r\n                        doc\r\n                    );\r\n                })\r\n            );\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    async bulkRemove(\r\n        ids: string[]\r\n    ): Promise<{\r\n        success: RxDocument<RxDocumentType, OrmMethods>[];\r\n        error: RxStorageWriteError<RxDocumentType>[];\r\n    }> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const primaryPath = this.schema.primaryPath;\r\n        /**\r\n         * Optimization shortcut,\r\n         * do nothing when called with an empty array\r\n         */\r\n        if (ids.length === 0) {\r\n            return {\r\n                success: [],\r\n                error: []\r\n            };\r\n        }\r\n\r\n        const rxDocumentMap = await this.findByIds(ids).exec();\r\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\r\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\r\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\r\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\r\n            docsData.push(data);\r\n            docsMap.set(rxDocument.primary, data);\r\n        });\r\n\r\n        await Promise.all(\r\n            docsData.map(doc => {\r\n                const primary = (doc as any)[this.schema.primaryPath];\r\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\r\n            })\r\n        );\r\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\r\n            const writeDoc = flatClone(doc);\r\n            writeDoc._deleted = true;\r\n            return {\r\n                previous: doc,\r\n                document: writeDoc\r\n            };\r\n        });\r\n        const results = await this.storageInstance.bulkWrite(\r\n            removeDocs,\r\n            'rx-collection-bulk-remove'\r\n        );\r\n\r\n\r\n        const success = getWrittenDocumentsFromBulkWriteResponse(\r\n            this.schema.primaryPath,\r\n            removeDocs,\r\n            results\r\n        );\r\n        const successIds: string[] = success.map(d => d[primaryPath] as string);\r\n\r\n        // run hooks\r\n        await Promise.all(\r\n            successIds.map(id => {\r\n                return this._runHooks(\r\n                    'post',\r\n                    'remove',\r\n                    docsMap.get(id),\r\n                    rxDocumentMap.get(id)\r\n                );\r\n            })\r\n        );\r\n\r\n        const rxDocuments = successIds.map(id => getFromMapOrThrow(rxDocumentMap, id));\r\n\r\n        return {\r\n            success: rxDocuments,\r\n            error: results.error\r\n        };\r\n    }\r\n\r\n    /**\r\n     * same as bulkInsert but overwrites existing document with same primary\r\n     */\r\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<{\r\n        success: RxDocument<RxDocumentType, OrmMethods>[];\r\n        error: RxStorageWriteError<RxDocumentType>[];\r\n    }> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const insertData: RxDocumentType[] = [];\r\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\r\n        docsData.forEach(docData => {\r\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\r\n            const primary: string = useJson[this.schema.primaryPath] as any;\r\n            if (!primary) {\r\n                throw newRxError('COL3', {\r\n                    primaryPath: this.schema.primaryPath as string,\r\n                    data: useJson,\r\n                    schema: this.schema.jsonSchema\r\n                });\r\n            }\r\n            useJsonByDocId.set(primary, useJson);\r\n            insertData.push(useJson);\r\n        });\r\n\r\n        const insertResult = await this.bulkInsert(insertData);\r\n        const success = insertResult.success.slice(0);\r\n        const error: RxStorageWriteError<RxDocumentType>[] = [];\r\n\r\n        // update the ones that existed already\r\n        await Promise.all(\r\n            insertResult.error.map(async (err) => {\r\n                if (err.status !== 409) {\r\n                    error.push(err);\r\n                } else {\r\n                    const id = err.documentId;\r\n                    const writeData = getFromMapOrThrow(useJsonByDocId, id);\r\n                    const docDataInDb = ensureNotFalsy(err.documentInDb);\r\n                    const doc = this._docCache.getCachedRxDocuments([docDataInDb])[0];\r\n                    const newDoc = await doc.incrementalModify(() => writeData);\r\n                    success.push(newDoc);\r\n                }\r\n            })\r\n        );\r\n        return {\r\n            error,\r\n            success\r\n        };\r\n    }\r\n\r\n    /**\r\n     * same as insert but overwrites existing document with same primary\r\n     */\r\n    async upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const bulkResult = await this.bulkUpsert([json]);\r\n        throwIfIsStorageWriteError<RxDocumentType>(\r\n            this.asRxCollection,\r\n            (json as any)[this.schema.primaryPath],\r\n            json as any,\r\n            bulkResult.error[0]\r\n        );\r\n        return bulkResult.success[0];\r\n    }\r\n\r\n    /**\r\n     * upserts to a RxDocument, uses incrementalModify if document already exists\r\n     */\r\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\r\n        const primary: string = useJson[this.schema.primaryPath] as any;\r\n        if (!primary) {\r\n            throw newRxError('COL4', {\r\n                data: json\r\n            });\r\n        }\r\n\r\n        // ensure that it won't try 2 parallel runs\r\n        let queue = this._incrementalUpsertQueues.get(primary);\r\n        if (!queue) {\r\n            queue = PROMISE_RESOLVE_VOID;\r\n        }\r\n        queue = queue\r\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\r\n            .then((wasInserted) => {\r\n                if (!wasInserted.inserted) {\r\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\r\n                } else {\r\n                    return wasInserted.doc;\r\n                }\r\n            });\r\n        this._incrementalUpsertQueues.set(primary, queue);\r\n        return queue;\r\n    }\r\n\r\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\r\n        RxDocumentType,\r\n        RxDocument<RxDocumentType, OrmMethods>[],\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        if (typeof queryObj === 'string') {\r\n            throw newRxError('COL5', {\r\n                queryObj\r\n            });\r\n        }\r\n\r\n        if (!queryObj) {\r\n            queryObj = _getDefaultQuery();\r\n        }\r\n\r\n        const query = createRxQuery('find', queryObj, this as any);\r\n        return query as any;\r\n    }\r\n\r\n    findOne(\r\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\r\n    ): RxQuery<\r\n        RxDocumentType,\r\n        RxDocument<RxDocumentType, OrmMethods> | null,\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n\r\n        // TODO move this check to dev-mode plugin\r\n        if (\r\n            typeof queryObj === 'number' ||\r\n            Array.isArray(queryObj)\r\n        ) {\r\n            throw newRxTypeError('COL6', {\r\n                queryObj\r\n            });\r\n        }\r\n\r\n        let query;\r\n\r\n        if (typeof queryObj === 'string') {\r\n            query = createRxQuery('findOne', {\r\n                selector: {\r\n                    [this.schema.primaryPath]: queryObj\r\n                },\r\n                limit: 1\r\n            }, this as any);\r\n        } else {\r\n            if (!queryObj) {\r\n                queryObj = _getDefaultQuery();\r\n            }\r\n\r\n\r\n            // cannot have limit on findOne queries because it will be overwritten\r\n            if ((queryObj as MangoQuery).limit) {\r\n                throw newRxError('QU6');\r\n            }\r\n\r\n            queryObj = flatClone(queryObj);\r\n            (queryObj as any).limit = 1;\r\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\r\n        }\r\n\r\n\r\n        return query as any;\r\n    }\r\n\r\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\r\n        RxDocumentType,\r\n        number,\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        if (!queryObj) {\r\n            queryObj = _getDefaultQuery();\r\n        }\r\n        const query = createRxQuery('count', queryObj, this as any);\r\n        return query as any;\r\n    }\r\n\r\n    /**\r\n     * find a list documents by their primary key\r\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\r\n     */\r\n    findByIds(\r\n        ids: string[]\r\n    ): RxQuery<\r\n        RxDocumentType,\r\n        Map<string, RxDocument<RxDocumentType, OrmMethods>>,\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotDestroyed(this);\r\n        const mangoQuery: MangoQuery<RxDocumentType> = {\r\n            selector: {\r\n                [this.schema.primaryPath]: {\r\n                    $in: ids.slice(0)\r\n                }\r\n            } as any\r\n        };\r\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\r\n        return query as any;\r\n    }\r\n\r\n    /**\r\n     * Export collection to a JSON friendly format.\r\n     */\r\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\r\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\r\n    exportJSON(): Promise<any> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    /**\r\n     * Import the parsed JSON export into the collection.\r\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\r\n     */\r\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\r\n        throw pluginMissing('crdt');\r\n    }\r\n\r\n\r\n    addPipeline(_options: RxPipelineOptions<RxDocumentType>): Promise<RxPipeline<RxDocumentType>> {\r\n        throw pluginMissing('pipeline');\r\n    }\r\n\r\n    /**\r\n     * HOOKS\r\n     */\r\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\r\n        if (typeof fun !== 'function') {\r\n            throw newRxTypeError('COL7', {\r\n                key,\r\n                when\r\n            });\r\n        }\r\n\r\n        if (!HOOKS_WHEN.includes(when)) {\r\n            throw newRxTypeError('COL8', {\r\n                key,\r\n                when\r\n            });\r\n        }\r\n\r\n        if (!HOOKS_KEYS.includes(key)) {\r\n            throw newRxError('COL9', {\r\n                key\r\n            });\r\n        }\r\n\r\n        if (when === 'post' && key === 'create' && parallel === true) {\r\n            throw newRxError('COL10', {\r\n                when,\r\n                key,\r\n                parallel\r\n            });\r\n        }\r\n\r\n        // bind this-scope to hook-function\r\n        const boundFun = fun.bind(this);\r\n\r\n        const runName = parallel ? 'parallel' : 'series';\r\n\r\n        this.hooks[key] = this.hooks[key] || {};\r\n        this.hooks[key][when] = this.hooks[key][when] || {\r\n            series: [],\r\n            parallel: []\r\n        };\r\n        this.hooks[key][when][runName].push(boundFun);\r\n    }\r\n\r\n    getHooks(when: HookWhenType, key: HookKeyType) {\r\n        if (\r\n            !this.hooks[key] ||\r\n            !this.hooks[key][when]\r\n        ) {\r\n            return {\r\n                series: [],\r\n                parallel: []\r\n            };\r\n        }\r\n        return this.hooks[key][when];\r\n    }\r\n\r\n    hasHooks(when: HookWhenType, key: HookKeyType) {\r\n        /**\r\n         * Performance shortcut\r\n         * so that we not have to build the empty object.\r\n         */\r\n        if (\r\n            !this.hooks[key] ||\r\n            !this.hooks[key][when]\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        const hooks = this.getHooks(when, key);\r\n        if (!hooks) {\r\n            return false;\r\n        }\r\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\r\n    }\r\n\r\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\r\n        const hooks = this.getHooks(when, key);\r\n\r\n        if (!hooks) {\r\n            return PROMISE_RESOLVE_VOID;\r\n        }\r\n\r\n        // run parallel: false\r\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\r\n        return promiseSeries(tasks)\r\n            // run parallel: true\r\n            .then(() => Promise.all(\r\n                hooks.parallel\r\n                    .map((hook: any) => hook(data, instance))\r\n            ));\r\n    }\r\n\r\n    /**\r\n     * does the same as ._runHooks() but with non-async-functions\r\n     */\r\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\r\n        if (!this.hasHooks(when, key)) {\r\n            return;\r\n        }\r\n        const hooks = this.getHooks(when, key);\r\n        if (!hooks) return;\r\n        hooks.series.forEach((hook: any) => hook(data, instance));\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves after the given time.\r\n     * Ensures that is properly cleans up when the collection is destroyed\r\n     * so that no running timeouts prevent the exit of the JavaScript process.\r\n     */\r\n    promiseWait(time: number): Promise<void> {\r\n        const ret = new Promise<void>(res => {\r\n            const timeout = setTimeout(() => {\r\n                this.timeouts.delete(timeout);\r\n                res();\r\n            }, time);\r\n            this.timeouts.add(timeout);\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    async destroy(): Promise<boolean> {\r\n        if (this.destroyed) {\r\n            return PROMISE_RESOLVE_FALSE;\r\n        }\r\n\r\n\r\n        await Promise.all(this.onDestroy.map(fn => fn()));\r\n\r\n        /**\r\n         * Settings destroyed = true\r\n         * must be the first thing to do,\r\n         * so for example the replication can directly stop\r\n         * instead of sending requests to a closed storage.\r\n         */\r\n        this.destroyed = true;\r\n\r\n\r\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\r\n        if (this._changeEventBuffer) {\r\n            this._changeEventBuffer.destroy();\r\n        }\r\n        /**\r\n         * First wait until the whole database is idle.\r\n         * This ensures that the storage does not get closed\r\n         * while some operation is running.\r\n         * It is important that we do not intercept a running call\r\n         * because it might lead to undefined behavior like when a doc is written\r\n         * but the change is not added to the changes collection.\r\n         */\r\n        return this.database.requestIdlePromise()\r\n            .then(() => this.storageInstance.close())\r\n            .then(() => {\r\n                /**\r\n                 * Unsubscribing must be done AFTER the storageInstance.close()\r\n                 * Because the conflict handling is part of the subscriptions and\r\n                 * otherwise there might be open conflicts to be resolved which\r\n                 * will then stuck and never resolve.\r\n                 */\r\n                this._subs.forEach(sub => sub.unsubscribe());\r\n\r\n                delete this.database.collections[this.name];\r\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * remove all data of the collection\r\n     */\r\n    async remove(): Promise<any> {\r\n        await this.destroy();\r\n        await Promise.all(this.onRemove.map(fn => fn()));\r\n        await removeCollectionStorages(\r\n            this.database.storage,\r\n            this.database.internalStore,\r\n            this.database.token,\r\n            this.database.name,\r\n            this.name,\r\n            this.database.password,\r\n            this.database.hashFunction\r\n        );\r\n    }\r\n\r\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods, any, Reactivity> {\r\n        return this as any;\r\n    }\r\n}\r\n\r\n/**\r\n * adds the hook-functions to the collections prototype\r\n * this runs only once\r\n */\r\nfunction _applyHookFunctions(\r\n    collection: RxCollection<any, any>\r\n) {\r\n    if (hooksApplied) return; // already run\r\n    hooksApplied = true;\r\n    const colProto = Object.getPrototypeOf(collection);\r\n    HOOKS_KEYS.forEach(key => {\r\n        HOOKS_WHEN.map(when => {\r\n            const fnName = when + ucfirst(key);\r\n            colProto[fnName] = function (fun: string, parallel: boolean) {\r\n                return this.addHook(when, key, fun, parallel);\r\n            };\r\n        });\r\n    });\r\n}\r\n\r\nfunction _incrementalUpsertUpdate<RxDocType>(\r\n    doc: RxDocumentBase<RxDocType>,\r\n    json: RxDocumentData<RxDocType>\r\n): Promise<RxDocumentBase<RxDocType>> {\r\n    return doc.incrementalModify((_innerDoc) => {\r\n        return json;\r\n    });\r\n}\r\n\r\n/**\r\n * ensures that the given document exists\r\n * @return promise that resolves with new doc and flag if inserted\r\n */\r\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\r\n    rxCollection: RxCollection<RxDocType>,\r\n    primary: string,\r\n    json: any\r\n): Promise<\r\n    {\r\n        doc: RxDocument<RxDocType>;\r\n        inserted: boolean;\r\n    }\r\n> {\r\n    /**\r\n     * Optimisation shortcut,\r\n     * first try to find the document in the doc-cache\r\n     */\r\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\r\n    if (docDataFromCache) {\r\n        return Promise.resolve({\r\n            doc: rxCollection._docCache.getCachedRxDocuments([docDataFromCache])[0],\r\n            inserted: false\r\n        });\r\n    }\r\n    return rxCollection.findOne(primary).exec()\r\n        .then(doc => {\r\n            if (!doc) {\r\n                return rxCollection.insert(json).then(newDoc => ({\r\n                    doc: newDoc,\r\n                    inserted: true\r\n                }));\r\n            } else {\r\n                return {\r\n                    doc,\r\n                    inserted: false\r\n                };\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * creates and prepares a new collection\r\n */\r\nexport function createRxCollection(\r\n    {\r\n        database,\r\n        name,\r\n        schema,\r\n        instanceCreationOptions = {},\r\n        migrationStrategies = {},\r\n        autoMigrate = true,\r\n        statics = {},\r\n        methods = {},\r\n        attachments = {},\r\n        options = {},\r\n        localDocuments = false,\r\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\r\n        conflictHandler = defaultConflictHandler\r\n    }: any\r\n): Promise<RxCollection> {\r\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\r\n        databaseInstanceToken: database.token,\r\n        databaseName: database.name,\r\n        collectionName: name,\r\n        schema: schema.jsonSchema,\r\n        options: instanceCreationOptions,\r\n        multiInstance: database.multiInstance,\r\n        password: database.password,\r\n        devMode: overwritable.isDevMode()\r\n    };\r\n\r\n    runPluginHooks(\r\n        'preCreateRxStorageInstance',\r\n        storageInstanceCreationParams\r\n    );\r\n\r\n    return createRxCollectionStorageInstance(\r\n        database,\r\n        storageInstanceCreationParams\r\n    ).then(storageInstance => {\r\n        const collection = new RxCollectionBase(\r\n            database,\r\n            name,\r\n            schema,\r\n            storageInstance,\r\n            instanceCreationOptions,\r\n            migrationStrategies,\r\n            methods,\r\n            attachments,\r\n            options,\r\n            cacheReplacementPolicy,\r\n            statics,\r\n            conflictHandler\r\n        );\r\n\r\n        return collection\r\n            .prepare()\r\n            .then(() => {\r\n                // ORM add statics\r\n                Object\r\n                    .entries(statics)\r\n                    .forEach(([funName, fun]) => {\r\n                        Object.defineProperty(collection, funName, {\r\n                            get: () => (fun as any).bind(collection)\r\n                        });\r\n                    });\r\n\r\n                let ret = PROMISE_RESOLVE_VOID;\r\n                if (autoMigrate && collection.schema.version !== 0) {\r\n                    ret = collection.migratePromise();\r\n                }\r\n                return ret;\r\n            })\r\n            .then(() => {\r\n                runPluginHooks('createRxCollection', {\r\n                    collection,\r\n                    creator: {\r\n                        name,\r\n                        schema,\r\n                        storageInstance,\r\n                        instanceCreationOptions,\r\n                        migrationStrategies,\r\n                        methods,\r\n                        attachments,\r\n                        options,\r\n                        cacheReplacementPolicy,\r\n                        localDocuments,\r\n                        statics\r\n                    }\r\n                });\r\n                return collection as any;\r\n            })\r\n            /**\r\n             * If the collection creation fails,\r\n             * we yet have to close the storage instances.\r\n             */\r\n            .catch(err => {\r\n                return storageInstance.close()\r\n                    .then(() => Promise.reject(err as Error));\r\n            });\r\n    });\r\n}\r\n\r\nexport function isRxCollection(obj: any): boolean {\r\n    return obj instanceof RxCollectionBase;\r\n}\r\n"],"mappings":"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","ignoreList":[]}