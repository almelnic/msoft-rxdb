{"version":3,"file":"rx-change-event.d.js","names":[],"sources":["../../../src/types/rx-change-event.d.ts"],"sourcesContent":["import type {\r\n    EventBulk,\r\n    RxDocumentData\r\n} from './rx-storage.d.ts';\r\n\r\n\r\nexport type RxChangeEventBase<RxDocType> = {\r\n    operation: 'INSERT' | 'UPDATE' | 'DELETE';\r\n\r\n    readonly documentId: string;\r\n\r\n    // optional, does not exist on changes to localdocs of the database\r\n    readonly collectionName?: string;\r\n\r\n    // true if the event is about a local document, false if not.\r\n    readonly isLocal: boolean;\r\n\r\n    documentData: RxDocumentData<RxDocType>;\r\n};\r\n\r\nexport type RxChangeEventInsert<RxDocType> = RxChangeEventBase<RxDocType> & {\r\n    operation: 'INSERT';\r\n    previousDocumentData: undefined;\r\n};\r\n\r\nexport type RxChangeEventUpdate<RxDocType> = RxChangeEventBase<RxDocType> & {\r\n    operation: 'UPDATE';\r\n    previousDocumentData: RxDocumentData<RxDocType>;\r\n};\r\n\r\nexport type RxChangeEventDelete<RxDocType> = RxChangeEventBase<RxDocType> & {\r\n    operation: 'DELETE';\r\n    previousDocumentData: RxDocumentData<RxDocType>;\r\n};\r\n\r\nexport type RxChangeEvent<RxDocType> = RxChangeEventInsert<RxDocType> | RxChangeEventUpdate<RxDocType> | RxChangeEventDelete<RxDocType>;\r\n\r\n/**\r\n * Internally, all events are processed via bulks\r\n * to save performance when sending them over a transport layer\r\n * or de-duplicating them.\r\n */\r\nexport type RxChangeEventBulk<DocType> = EventBulk<RxChangeEvent<DocType>, any> & {\r\n    // optional, not given for changes to local documents of a RxDatabase.\r\n    collectionName?: string;\r\n    /**\r\n     * Token of the database instance that created the events.\r\n     * Used to determine if the events came from another instance over the BroadcastChannel.\r\n     */\r\n    databaseToken: string;\r\n    /**\r\n     * The storageToken of the RxDatabase that created the events.\r\n     * Used to ensure we do not process events of other RxDatabases.\r\n     */\r\n    storageToken: string;\r\n    /**\r\n     * If true, the events belong to some internal stuff like from plugins.\r\n     * Internal events are not emitted to the outside over the .$ Observables.\r\n     */\r\n    internal: boolean;\r\n};\r\n"],"mappings":"","ignoreList":[]}