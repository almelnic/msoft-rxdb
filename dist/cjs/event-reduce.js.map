{"version":3,"file":"event-reduce.js","names":["_eventReduceJs","require","_rxChangeEvent","_index","_rxQueryHelper","getSortFieldsOfQuery","primaryKey","query","sort","length","map","part","Object","keys","RXQUERY_QUERY_PARAMS_CACHE","exports","WeakMap","getQueryParams","rxQuery","getFromMapOrCreate","collection","normalizedMangoQuery","normalizeMangoQuery","storageInstance","schema","clone","mangoQuery","primaryPath","sortComparator","getSortComparator","jsonSchema","useSortComparator","docA","docB","sortComparatorData","queryMatcher","getQueryMatcher","useQueryMatcher","doc","queryMatcherData","ret","skip","limit","sortFields","calculateNewResults","rxChangeEvents","database","eventReduce","runFullQueryAgain","queryParams","previousResults","ensureNotFalsy","_result","docsData","slice","previousResultsMap","docsDataMap","changed","eventReduceEvents","cE","rxChangeEventToEventReduceChangeEvent","filter","arrayFilterNotEmpty","foundNonOptimizeable","find","eventReduceEvent","stateResolveFunctionInput","changeEvent","keyDocumentMap","actionName","calculateActionName","runAction","newResults"],"sources":["../../src/event-reduce.ts"],"sourcesContent":["import {\r\n    ActionName,\r\n    calculateActionName,\r\n    runAction,\r\n    QueryParams,\r\n    QueryMatcher,\r\n    DeterministicSortComparator,\r\n    StateResolveFunctionInput,\r\n    ChangeEvent\r\n} from 'event-reduce-js';\r\nimport type {\r\n    RxQuery,\r\n    MangoQuery,\r\n    RxChangeEvent,\r\n    StringKeys,\r\n    RxDocumentData\r\n} from './types/index.d.ts';\r\nimport { rxChangeEventToEventReduceChangeEvent } from './rx-change-event.ts';\r\nimport {\r\n    arrayFilterNotEmpty,\r\n    clone,\r\n    ensureNotFalsy,\r\n    getFromMapOrCreate\r\n} from './plugins/utils/index.ts';\r\nimport { getQueryMatcher, getSortComparator, normalizeMangoQuery } from './rx-query-helper.ts';\r\n\r\nexport type EventReduceResultNeg = {\r\n    runFullQueryAgain: true;\r\n};\r\nexport type EventReduceResultPos<RxDocumentType> = {\r\n    runFullQueryAgain: false;\r\n    changed: boolean;\r\n    newResults: RxDocumentType[];\r\n};\r\nexport type EventReduceResult<RxDocumentType> = EventReduceResultNeg | EventReduceResultPos<RxDocumentType>;\r\n\r\n\r\nexport function getSortFieldsOfQuery<RxDocType>(\r\n    primaryKey: StringKeys<RxDocumentData<RxDocType>>,\r\n    query: MangoQuery<RxDocType>\r\n): (string | StringKeys<RxDocType>)[] {\r\n    if (!query.sort || query.sort.length === 0) {\r\n        return [primaryKey];\r\n    } else {\r\n        return query.sort.map(part => Object.keys(part)[0]);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const RXQUERY_QUERY_PARAMS_CACHE: WeakMap<RxQuery, QueryParams<any>> = new WeakMap();\r\nexport function getQueryParams<RxDocType>(\r\n    rxQuery: RxQuery<RxDocType>\r\n): QueryParams<RxDocType> {\r\n    return getFromMapOrCreate(\r\n        RXQUERY_QUERY_PARAMS_CACHE,\r\n        rxQuery,\r\n        () => {\r\n            const collection = rxQuery.collection;\r\n            const normalizedMangoQuery = normalizeMangoQuery(\r\n                collection.storageInstance.schema,\r\n                clone(rxQuery.mangoQuery)\r\n            );\r\n            const primaryKey = collection.schema.primaryPath;\r\n\r\n            /**\r\n             * Create a custom sort comparator\r\n             * that uses the hooks to ensure\r\n             * we send for example compressed documents to be sorted by compressed queries.\r\n             */\r\n            const sortComparator = getSortComparator(\r\n                collection.schema.jsonSchema,\r\n                normalizedMangoQuery\r\n            );\r\n\r\n            const useSortComparator: DeterministicSortComparator<RxDocType> = (docA: RxDocType, docB: RxDocType) => {\r\n                const sortComparatorData = {\r\n                    docA,\r\n                    docB,\r\n                    rxQuery\r\n                };\r\n                return sortComparator(sortComparatorData.docA, sortComparatorData.docB);\r\n            };\r\n\r\n            /**\r\n             * Create a custom query matcher\r\n             * that uses the hooks to ensure\r\n             * we send for example compressed documents to match compressed queries.\r\n             */\r\n            const queryMatcher = getQueryMatcher(\r\n                collection.schema.jsonSchema,\r\n                normalizedMangoQuery\r\n            );\r\n            const useQueryMatcher: QueryMatcher<RxDocumentData<RxDocType>> = (doc: RxDocumentData<RxDocType>) => {\r\n                const queryMatcherData = {\r\n                    doc,\r\n                    rxQuery\r\n                };\r\n                return queryMatcher(queryMatcherData.doc);\r\n            };\r\n\r\n            const ret: QueryParams<any> = {\r\n                primaryKey: rxQuery.collection.schema.primaryPath as any,\r\n                skip: normalizedMangoQuery.skip,\r\n                limit: normalizedMangoQuery.limit,\r\n                sortFields: getSortFieldsOfQuery(primaryKey, normalizedMangoQuery) as string[],\r\n                sortComparator: useSortComparator,\r\n                queryMatcher: useQueryMatcher\r\n            };\r\n            return ret;\r\n        }\r\n    );\r\n}\r\n\r\n\r\nexport function calculateNewResults<RxDocumentType>(\r\n    rxQuery: RxQuery<RxDocumentType>,\r\n    rxChangeEvents: RxChangeEvent<RxDocumentType>[]\r\n): EventReduceResult<RxDocumentType> {\r\n    if (!rxQuery.collection.database.eventReduce) {\r\n        return {\r\n            runFullQueryAgain: true\r\n        };\r\n    }\r\n    const queryParams = getQueryParams(rxQuery);\r\n    const previousResults: RxDocumentType[] = ensureNotFalsy(rxQuery._result).docsData.slice(0);\r\n    const previousResultsMap: Map<string, RxDocumentType> = ensureNotFalsy(rxQuery._result).docsDataMap;\r\n    let changed: boolean = false;\r\n\r\n    const eventReduceEvents: ChangeEvent<RxDocumentType>[] = rxChangeEvents\r\n        .map(cE => rxChangeEventToEventReduceChangeEvent(cE))\r\n        .filter(arrayFilterNotEmpty);\r\n\r\n    const foundNonOptimizeable = eventReduceEvents.find(eventReduceEvent => {\r\n        const stateResolveFunctionInput: StateResolveFunctionInput<RxDocumentType> = {\r\n            queryParams,\r\n            changeEvent: eventReduceEvent,\r\n            previousResults,\r\n            keyDocumentMap: previousResultsMap\r\n        };\r\n\r\n        const actionName: ActionName = calculateActionName(stateResolveFunctionInput);\r\n        if (actionName === 'runFullQueryAgain') {\r\n            return true;\r\n        } else if (actionName !== 'doNothing') {\r\n            changed = true;\r\n            runAction(\r\n                actionName,\r\n                queryParams,\r\n                eventReduceEvent,\r\n                previousResults,\r\n                previousResultsMap\r\n            );\r\n            return false;\r\n        }\r\n    });\r\n    if (foundNonOptimizeable) {\r\n        return {\r\n            runFullQueryAgain: true,\r\n        };\r\n    } else {\r\n        return {\r\n            runFullQueryAgain: false,\r\n            changed,\r\n            newResults: previousResults\r\n        };\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AAiBA,IAAAC,cAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AAMA,IAAAG,cAAA,GAAAH,OAAA;AAaO,SAASI,oBAAoBA,CAChCC,UAAiD,EACjDC,KAA4B,EACM;EAClC,IAAI,CAACA,KAAK,CAACC,IAAI,IAAID,KAAK,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IACxC,OAAO,CAACH,UAAU,CAAC;EACvB,CAAC,MAAM;IACH,OAAOC,KAAK,CAACC,IAAI,CAACE,GAAG,CAACC,IAAI,IAAIC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD;AACJ;AAIO,IAAMG,0BAA8D,GAAAC,OAAA,CAAAD,0BAAA,GAAG,IAAIE,OAAO,CAAC,CAAC;AACpF,SAASC,cAAcA,CAC1BC,OAA2B,EACL;EACtB,OAAO,IAAAC,yBAAkB,EACrBL,0BAA0B,EAC1BI,OAAO,EACP,MAAM;IACF,IAAME,UAAU,GAAGF,OAAO,CAACE,UAAU;IACrC,IAAMC,oBAAoB,GAAG,IAAAC,kCAAmB,EAC5CF,UAAU,CAACG,eAAe,CAACC,MAAM,EACjC,IAAAC,YAAK,EAACP,OAAO,CAACQ,UAAU,CAC5B,CAAC;IACD,IAAMpB,UAAU,GAAGc,UAAU,CAACI,MAAM,CAACG,WAAW;;IAEhD;AACZ;AACA;AACA;AACA;IACY,IAAMC,cAAc,GAAG,IAAAC,gCAAiB,EACpCT,UAAU,CAACI,MAAM,CAACM,UAAU,EAC5BT,oBACJ,CAAC;IAED,IAAMU,iBAAyD,GAAGA,CAACC,IAAe,EAAEC,IAAe,KAAK;MACpG,IAAMC,kBAAkB,GAAG;QACvBF,IAAI;QACJC,IAAI;QACJf;MACJ,CAAC;MACD,OAAOU,cAAc,CAACM,kBAAkB,CAACF,IAAI,EAAEE,kBAAkB,CAACD,IAAI,CAAC;IAC3E,CAAC;;IAED;AACZ;AACA;AACA;AACA;IACY,IAAME,YAAY,GAAG,IAAAC,8BAAe,EAChChB,UAAU,CAACI,MAAM,CAACM,UAAU,EAC5BT,oBACJ,CAAC;IACD,IAAMgB,eAAwD,GAAIC,GAA8B,IAAK;MACjG,IAAMC,gBAAgB,GAAG;QACrBD,GAAG;QACHpB;MACJ,CAAC;MACD,OAAOiB,YAAY,CAACI,gBAAgB,CAACD,GAAG,CAAC;IAC7C,CAAC;IAED,IAAME,GAAqB,GAAG;MAC1BlC,UAAU,EAAEY,OAAO,CAACE,UAAU,CAACI,MAAM,CAACG,WAAkB;MACxDc,IAAI,EAAEpB,oBAAoB,CAACoB,IAAI;MAC/BC,KAAK,EAAErB,oBAAoB,CAACqB,KAAK;MACjCC,UAAU,EAAEtC,oBAAoB,CAACC,UAAU,EAAEe,oBAAoB,CAAa;MAC9EO,cAAc,EAAEG,iBAAiB;MACjCI,YAAY,EAAEE;IAClB,CAAC;IACD,OAAOG,GAAG;EACd,CACJ,CAAC;AACL;AAGO,SAASI,mBAAmBA,CAC/B1B,OAAgC,EAChC2B,cAA+C,EACd;EACjC,IAAI,CAAC3B,OAAO,CAACE,UAAU,CAAC0B,QAAQ,CAACC,WAAW,EAAE;IAC1C,OAAO;MACHC,iBAAiB,EAAE;IACvB,CAAC;EACL;EACA,IAAMC,WAAW,GAAGhC,cAAc,CAACC,OAAO,CAAC;EAC3C,IAAMgC,eAAiC,GAAG,IAAAC,qBAAc,EAACjC,OAAO,CAACkC,OAAO,CAAC,CAACC,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3F,IAAMC,kBAA+C,GAAG,IAAAJ,qBAAc,EAACjC,OAAO,CAACkC,OAAO,CAAC,CAACI,WAAW;EACnG,IAAIC,OAAgB,GAAG,KAAK;EAE5B,IAAMC,iBAAgD,GAAGb,cAAc,CAClEnC,GAAG,CAACiD,EAAE,IAAI,IAAAC,oDAAqC,EAACD,EAAE,CAAC,CAAC,CACpDE,MAAM,CAACC,0BAAmB,CAAC;EAEhC,IAAMC,oBAAoB,GAAGL,iBAAiB,CAACM,IAAI,CAACC,gBAAgB,IAAI;IACpE,IAAMC,yBAAoE,GAAG;MACzEjB,WAAW;MACXkB,WAAW,EAAEF,gBAAgB;MAC7Bf,eAAe;MACfkB,cAAc,EAAEb;IACpB,CAAC;IAED,IAAMc,UAAsB,GAAG,IAAAC,kCAAmB,EAACJ,yBAAyB,CAAC;IAC7E,IAAIG,UAAU,KAAK,mBAAmB,EAAE;MACpC,OAAO,IAAI;IACf,CAAC,MAAM,IAAIA,UAAU,KAAK,WAAW,EAAE;MACnCZ,OAAO,GAAG,IAAI;MACd,IAAAc,wBAAS,EACLF,UAAU,EACVpB,WAAW,EACXgB,gBAAgB,EAChBf,eAAe,EACfK,kBACJ,CAAC;MACD,OAAO,KAAK;IAChB;EACJ,CAAC,CAAC;EACF,IAAIQ,oBAAoB,EAAE;IACtB,OAAO;MACHf,iBAAiB,EAAE;IACvB,CAAC;EACL,CAAC,MAAM;IACH,OAAO;MACHA,iBAAiB,EAAE,KAAK;MACxBS,OAAO;MACPe,UAAU,EAAEtB;IAChB,CAAC;EACL;AACJ","ignoreList":[]}